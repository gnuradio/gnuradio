id: uhd_rfnoc_rx_streamer
label: RFNoC Rx Streamer

templates:
  imports: |-
    from gnuradio import uhd
  make: |-
    uhd.rfnoc_rx_streamer(
        self.rfnoc_graph,
        ${ num_chans },
        uhd.stream_args(
            cpu_format="${ output_type.type }",
            otw_format="${ otw.type }",
            channels=[],
            args=${ args },
        ),
        ${ vlen },
        ${ issue_stream_cmd },
        ${ start_time_set },
        uhd.time_spec(${start_time}),
    )
    %if use_default_adapter_id == 'False':
    for port, adapter_id in enumerate(${ adapter_id_list }):
        self.rfnoc_graph.set_streamer_adapter_id(
            self.${id}.get_unique_id(), port, adapter_id)
    %endif

parameters:
- id: num_chans
  label: Number of Channels
  dtype: int
  default: 1
  hide: part
- id: args
  label: Args
  dtype: string
  hide: part
- id: vlen
  label: Vector Length
  dtype: int
  default: 1
  hide: part
- id: otw
  label: Wire Format
  dtype: enum
  options: ['', sc16, s16, s8]
  option_labels: [Automatic, Complex int16, int16, Byte]
  option_attributes:
    type: ['', sc16, s16, s8]
  hide: part
- id: output_type
  label: Output Type
  dtype: enum
  options: [fc32, sc16, s16, s8]
  option_labels: [Complex float32, Complex int16, int16, Byte]
  option_attributes:
    type: [fc32, sc16, s16, s8]
  hide: part
- id: use_default_adapter_id
  label: Default Adapter ID
  dtype: bool
  default: 'True'
  options: ['True', 'False']
  option_labels: ['Yes', 'No']
  hide: part
- id: adapter_id_list
  label: Adapter ID List
  dtype: int_vector
  default: [0,]
  hide: ${ 'all' if use_default_adapter_id else 'none' }
- id: issue_stream_cmd
  label: Start stream
  dtype: bool
  default: 'True'
  options: ['True', 'False']
  option_labels: ["Yes", "No"]
- id: start_time_set
  label: Start time
  dtype: bool
  default: 'False'
  options: ['True', 'False']
  option_labels: ["Time spec", "Now"]
  hide: ${ "part" if issue_stream_cmd else "all" }
- id: start_time
  label: "Start time spec [s]"
  dtype: float
  default: 0
  hide: ${ "part" if issue_stream_cmd and start_time_set else "all" }
  

asserts:
  - ${ num_chans > 0 }
  - ${ vlen > 0 }
  - ${ use_default_adapter_id or len(adapter_id_list) == num_chans }

inputs:
- domain: rfnoc
  dtype: ${ otw.type }
  multiplicity: ${ num_chans }

outputs:
- domain: stream
  dtype: ${ output_type.type }
  multiplicity: ${ num_chans }
  vlen: ${ vlen }

file_format: 1
