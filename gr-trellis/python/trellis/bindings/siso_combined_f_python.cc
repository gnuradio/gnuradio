/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(siso_combined_f.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(7c23b336019cbf7f771376d7d6677088)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/trellis/siso_combined_f.h>
// pydoc.h is automatically generated in the build directory
#include <siso_combined_f_pydoc.h>

void bind_siso_combined_f(py::module& m)
{

    using siso_combined_f = ::gr::trellis::siso_combined_f;


    py::class_<siso_combined_f,
               gr::block,
               gr::basic_block,
               std::shared_ptr<siso_combined_f>>(m, "siso_combined_f", D(siso_combined_f))

        .def(py::init(&siso_combined_f::make),
             py::arg("FSM"),
             py::arg("K"),
             py::arg("S0"),
             py::arg("SK"),
             py::arg("POSTI"),
             py::arg("POSTO"),
             py::arg("d_SISO_TYPE"),
             py::arg("D"),
             py::arg("TABLE"),
             py::arg("TYPE"),
             D(siso_combined_f, make))


        .def("FSM", &siso_combined_f::FSM, D(siso_combined_f, FSM))


        .def("K", &siso_combined_f::K, D(siso_combined_f, K))


        .def("S0", &siso_combined_f::S0, D(siso_combined_f, S0))


        .def("SK", &siso_combined_f::SK, D(siso_combined_f, SK))


        .def("POSTI", &siso_combined_f::POSTI, D(siso_combined_f, POSTI))


        .def("POSTO", &siso_combined_f::POSTO, D(siso_combined_f, POSTO))


        .def("SISO_TYPE", &siso_combined_f::SISO_TYPE, D(siso_combined_f, SISO_TYPE))


        .def("D", &siso_combined_f::D, D(siso_combined_f, D))


        .def("TABLE", &siso_combined_f::TABLE, D(siso_combined_f, TABLE))


        .def("TYPE", &siso_combined_f::TYPE, D(siso_combined_f, TYPE))


        .def("set_FSM",
             &siso_combined_f::set_FSM,
             py::arg("FSM"),
             D(siso_combined_f, set_FSM))


        .def("set_K", &siso_combined_f::set_K, py::arg("K"), D(siso_combined_f, set_K))


        .def(
            "set_S0", &siso_combined_f::set_S0, py::arg("S0"), D(siso_combined_f, set_S0))


        .def(
            "set_SK", &siso_combined_f::set_SK, py::arg("SK"), D(siso_combined_f, set_SK))


        .def("set_POSTI",
             &siso_combined_f::set_POSTI,
             py::arg("POSTI"),
             D(siso_combined_f, set_POSTI))


        .def("set_POSTO",
             &siso_combined_f::set_POSTO,
             py::arg("POSTO"),
             D(siso_combined_f, set_POSTO))


        .def("set_SISO_TYPE",
             &siso_combined_f::set_SISO_TYPE,
             py::arg("type"),
             D(siso_combined_f, set_SISO_TYPE))


        .def("set_D", &siso_combined_f::set_D, py::arg("D"), D(siso_combined_f, set_D))


        .def("set_TABLE",
             &siso_combined_f::set_TABLE,
             py::arg("table"),
             D(siso_combined_f, set_TABLE))


        .def("set_TYPE",
             &siso_combined_f::set_TYPE,
             py::arg("type"),
             D(siso_combined_f, set_TYPE))

        ;
}
