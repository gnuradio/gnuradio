/* -*- c++ -*- */
/*
 * Copyright 2006,2009,2013 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

#if HAVE_CONFIG_H
#include <config.h>
#endif

#include <gnuradio/constants.h>
#include <boost/dll/runtime_symbol_info.hpp>
#include <cstdlib>
#include <filesystem>

using std::filesystem::path;

namespace gr {
const std::string prefix()
{
    // Use "GR_PREFIX" environment variable when specified
    const char* prefix = std::getenv("GR_PREFIX");
    if (prefix != NULL)
        return prefix;

    path prefix_rel_lib = "@prefix_relative_to_lib@";
    path gr_runtime_lib_path = boost::dll::this_line_location().string();
    // Canonize before decomposing path so result is reliable and without symlinks
    path canonical_lib_path = std::filesystem::canonical(gr_runtime_lib_path);
    path prefix_path = canonical_lib_path.parent_path() / prefix_rel_lib;
    return prefix_path.lexically_normal().string();
}

const std::string sysconfdir()
{
    path sysconfdir_rel_prefix = "@SYSCONFDIR_relative_to_prefix@";
    path prefix_path = prefix();
    path sysconfdir_path = prefix_path / sysconfdir_rel_prefix;

    return sysconfdir_path.lexically_normal().string();
}

const std::string prefsdir()
{
    path prefsdir_rel_prefix = "@GR_PREFSDIR_relative_to_prefix@";
    path prefix_path = prefix();
    path prefsdir_path = prefix_path / prefsdir_rel_prefix;

    return prefsdir_path.lexically_normal().string();
}

const std::string build_date() { return "@BUILD_DATE@"; }

const std::string version() { return "@VERSION@"; }

// Return individual parts of the version
const std::string major_version() { return "@MAJOR_VERSION@"; }

const std::string api_version() { return "@API_COMPAT@"; }

const std::string minor_version() { return "@MINOR_VERSION@"; }

const std::string c_compiler() { return "@cmake_c_compiler_version@"; }

const std::string cxx_compiler() { return "@cmake_cxx_compiler_version@"; }

const std::string compiler_flags() { return "@COMPILER_INFO@"; }

const std::string build_time_enabled_components() { return "@_gr_enabled_components@"; }

const std::string pybind_version() { return "@pybind11_VERSION@"; }

} /* namespace gr */
