/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(sync_interpolator.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(43c073ed0f49328eaf22978b39ef14d1)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/sync_interpolator.h>
// pydoc.h is automatically generated in the build directory
#include <sync_interpolator_pydoc.h>

void bind_sync_interpolator(py::module& m)
{

    using sync_interpolator = ::gr::sync_interpolator;


    py::class_<sync_interpolator,
               gr::sync_block,
               gr::block,
               gr::basic_block,
               std::shared_ptr<sync_interpolator>>(
        m, "sync_interpolator", D(sync_interpolator))


        .def("interpolation",
             &sync_interpolator::interpolation,
             D(sync_interpolator, interpolation))


        .def("set_interpolation",
             &sync_interpolator::set_interpolation,
             py::arg("interpolation"),
             D(sync_interpolator, set_interpolation))


        .def("general_work",
             &sync_interpolator::general_work,
             py::arg("noutput_items"),
             py::arg("ninput_items"),
             py::arg("input_items"),
             py::arg("output_items"),
             D(sync_interpolator, general_work))


        .def("fixed_rate_ninput_to_noutput",
             &sync_interpolator::fixed_rate_ninput_to_noutput,
             py::arg("ninput"),
             D(sync_interpolator, fixed_rate_ninput_to_noutput))


        .def("fixed_rate_noutput_to_ninput",
             &sync_interpolator::fixed_rate_noutput_to_ninput,
             py::arg("noutput"),
             D(sync_interpolator, fixed_rate_noutput_to_ninput))

        ;


    py::module m_messages = m.def_submodule("messages");


    py::module m_thread = m.def_submodule("thread");
}
