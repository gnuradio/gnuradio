/*! \page build_guide Build Instructions and Information

\section dependencies Dependencies

The list of GNU Radio dependencies and the minimum required versions,
if any, to build the various GNU Radio components.

Most of these components do not need to be individually compiled or
installed. Instead, rely on your operating system's package manager or
binary installation process (the <b>apt-get</b> system in Debian and
Ubuntu, <b>yum</b> in RedHat and Fedora, etc.). GNU Radio tries to keep an
up-to-date build guide for the majority of the supported operating
systems on gnuradio.org
(http://gnuradio.org/redmine/projects/gnuradio/wiki/BuildGuide).

Not all dependencies are required for all components, and not all
components are required for a given installation. The list of required
components is determined by what the user requires from GNU Radio. If,
for example, you do not use any Comedi-based hardware, do not worry
about building gr-comedi.

Before trying to build these from source, please try your system's
installation tool (apt-get, pkg_install, YaST, yum, urpmi, etc.)
first. Most recent systems have these packages available.

\subsection dep_global Global Dependencies
\li git                      http://code.google.com/p/msysgit
\li cmake       (>= 2.6.3)   http://www.cmake.org/cmake/resources/software.html
\li boost       (>= 1.35)    http://www.boostpro.com/download
\li cppunit     (>= 1.9.14)  http://gaiacrtn.free.fr/cppunit/index.html
\li fftw3f      (>= 3.0.1)   http://www.fftw.org/install/windows.html

\subsection dep_python Python Wrappers
\li python      (>= 2.5)     http://www.python.org/download/
\li swig        (>= 1.3.31)  http://www.swig.org/download.html
\li numpy       (>= 1.1.0)   http://sourceforge.net/projects/numpy/files/NumPy/

\subsection dep_docs docs: Building the documentation
\li doxygen     (>= 1.5)     http://www.stack.nl/~dimitri/doxygen/download.html
\li latex*      (>= 2.0)     http://www.latex-project.org/

\subsection dep_grc grc: The GNU Radio Companion
\li Cheetah     (>= 2.0)     http://www.cheetahtemplate.org/
\li pygtk       (>= 2.10)    http://www.pygtk.org/downloads.html

\subsection dep_wavelet gr-wavelet: Collection of wavelet blocks
\li gsl         (>= 1.10)    http://gnuwin32.sourceforge.net/packages/gsl.htm

\subsection dep_gr_qtgui gr-qtgui: The QT-based Graphical User Interface
\li qt4         (>= 4.4.0)   http://qt.nokia.com/downloads/
\li qwt         (>= 5.2.0)   http://sourceforge.net/projects/qwt/
\li pyqt        (>= 4.10.0)  http://www.riverbankcomputing.co.uk/software/pyqt/download
\li pyqwt*      (>= 5.2.0)   http://pyqwt.sourceforge.net/download.html

\subsection dep_gr_wxgui gr-wxgui: The WX-based Graphical User Interface
\li wxpython    (>= 2.8)     http://www.wxpython.org/
\li python-lxml (>= 1.3.6)   http://lxml.de/

\subsection dep_gr_audio gr-audio: Audio Subsystems (system/OS dependent)
\li audio-alsa  (>= 0.9)     http://www.alsa-project.org
\li audio-jack  (>= 0.8)     http://jackaudio.org/
\li portaudio   (>= 19)      http://www.portaudio.com/
\li audio-oss   (>= 1.0)     http://www.opensound.com/oss.html
\li audio-osx
\li audio-windows

* Optional but recommended dependencies.

It is not necessary to satisfy all of these dependencies; just the
one(s) that are right for your system. On Linux, don't expect
audio-osx and audio-windows to be either satisfied or built.

\subsection dep_uhd uhd: The Ettus USRP Hardware Driver Interface
\li uhd         (>= 3.0.0)   http://code.ettus.com/redmine/ettus/projects/uhd/wiki

\subsection dep_gr_video_sdl gr-video-sdl: PAL and NTSC display
\li SDL	        (>= 1.2.0)   http://www.libsdl.org/download-1.2.php

\subsection dep_gr_comedi gr-comedi: Comedi hardware interface
\li comedilib   (>= 0.8.1)   http://www.comedi.org/

\subsection dep_gr_log gr-log: Logging Tools (Optional)
\li log4cpp     (>= 1.0)     http://log4cpp.sourceforge.net/


\section build_gr_cmake Building GNU Radio

GNU Radio is built using the CMake build system
(http://www.cmake.org/). The standard build method is as follows:

\code
$ mkdir $(builddir)
$ cd $(builddir)
$ cmake [OPTIONS] $(srcdir)
$ make
$ make test
$ sudo make install
\endcode

The \$(builddir) is the directory in which the code is built. This
<b>cannot</b> be the same path as where the source code resides. Often,
\$(builddir) is \$(srcdir)/build.

\section cmake_options CMake Options

Options can be used to specify where to find various library or
include file dependencies that are not automatically being found
(-DCMAKE_PREFIX_PATH) or set the install prefix
(-DCMAKE_INSTALL_PREFIX=(dir)).

Components can also be enabled and disabled through the options. For a
component named *gr-comp*, the option to disable would look like:
-DENABLE_GR_COMP=off. The "off" could also be "false" or "no", and
cmake is not case sensitive about these options. Similarly, "true",
"on", or "yes" will turn this component on. All components are enabled
by default so long as their dependencies are met.

An example is -DENABLE_PYTHON=False turns off building any Python or
Swigging components. The result will be the GNU Radio libraries and
C++ programs/applications/examples. No Python or GRC files will be
built or installed.

The -DENABLE_DEFAULT=False can be used to disable all
components. Individual components can then be selectively turned back
on. For example, just buidling the VOLK library can be
done with this:

\code
cmake -DENABLE_DEFAULT=Off -DENABLE_VOLK=True <srcdir>
\endcode


The build type allows you to specify the build as a debug or release
version. Each type sets different flags for different purposes. To set
the build type, use:

\code
-DCMAKE_BUILD_TYPE=<type>
\endcode

The available build types and the C/C++ flags they set are:

\li None: No flags; define them yourself
\li Release: -O3
\li Debug: -O2 -g
\li RelWithDebInfo: -O3 -g
\li MinSizeRel: -Os
\li NoOptWithASM: -O0 -g -save-temps
\li O2WithASM: -O2 -g -save-temps
\li O3WithASM: -O3 -g -save-temps

If not specified, the "Release" mode is the default.


\subsection cmake_other Collection of CMake Flags

\li CMAKE_BUILD_TYPE: Build profile type defined above. Default is "release".
\li CMAKE_INSTALL_PREFIX: Installation prefix path. Default is "/usr/local".
\li ENABLE_PYTHON: Turn Python bindings on/off. Default is True.
\li ENABLE_GR_<component>: Turn any top-level component on/off. Default is True for all.
\li ENABLE_GR_CTRLPORT: Turn Building ControlPort. Default is True
\li ENABLE_PERFORMANCE_COUNTERS: Turn performance counters on/off in runtime. Default is True.
\li ENABLE_ORC: tells VOLK enable/disable use of Orc. Default is True.
\li ENABLE_STATIC_LIBS: build static library files. Default is False.
\li CMAKE_TOOLCHAIN_FILE: A toolchain file to setup the CMake environment for cross-compiling.

Here are som other potentially helpful CMake flags. These are to help you specifically locate certain dependencies. While the CMake scripts themselves should generally find these for us, we can use these to help direct CMake to specific locations if we have installed a different version elsewhere on the system that CMake doesn't know about.

\li QWT_LIBRARIES: shared library to use for Qwt (in the form <path>/libqwt.so).
\li QWT_INCLUDE_DIRS: path to Qwt include files (e.g., /usr/include/qwt).
\li PYTHON_EXECUTABLE: Location of the 'python' binary you want to use (e.g., /usr/bin/python2.7).
\li PYTHON_INCLUDE_PATH: path to Python include files (e.g., /usr/include/python2.7).
\li PYTHON_LIBRARY: Python's shared library location (e.g., /usr/lib/python2.7.so.1).
\li Boost_INCLUDE_DIR: location of the 'boost' header file directory (e.g., /usr/include).
\li Boost_LIBRARY_DIRS: location of the libboost-xxx.so files (e.g., /usr/lib)


Other dependencies will have similar settings like these to properly locate them.


\subsection build_gr_cmake_e100 Building for the E100

To build GNU Radio on the Ettus Research E100 embedded platforms,
CMake has to know that the processors uses the NEON extensions. Use
the

\code
cmake -DCMAKE_CXX_FLAGS:STRING="-mcpu=cortex-a8 -mfpu=neon -mfloat-abi=softfp -g" \
      -DCMAKE_C_FLAGS:STRING="-mcpu=cortex-a8 -mfpu=neon -mfloat-abi=softfp -g" \
       <gr_source_dir>
\endcode

*/
