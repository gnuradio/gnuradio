id: soapy_rtlsdr_source
label: Soapy RTLSDR Source
flags: [python, throttle]

parameters:
  - id: type
    label: Output Type
    dtype: enum
    options: [fc32, sc16, sc8]
    option_labels: [Complex Float32, Complex Int16, Complex Byte]
    option_attributes:
      type: [fc32, sc16, sc8]
    hide: part

  - id: dev_args
    label: Device arguments
    dtype: string
    hide: ${'part' if not dev_args else 'none'}

  - id: samp_rate
    label: Sample Rate
    dtype: float
    default: 'samp_rate'

  - id: center_freq
    label: 'Center Freq (Hz)'
    category: RF Options
    dtype: real
    default: 'freq'

  - id: freq_correction
    label: 'Frequency Correction (PPM)'
    category: RF Options
    dtype: real
    default: '0'
    hide: 'part'

  - id: agc
    label: 'AGC'
    category: RF Options
    dtype: bool
    default: 'False'
    hide: 'part'

  - id: gain
    label: 'RF Gain'
    category: RF Options
    dtype: real
    default: '20'
    hide: 'part'

  - id: bias
    label: 'Bias Tee Power'
    dtype: bool
    default: 'False'
    hide: 'part'

inputs:
  - domain: message
    id: cmd
    optional: true

outputs:
  - domain: stream
    dtype: ${ type.type }
    multiplicity: 1

templates:
  imports: from gnuradio import soapy
  make: |
      None
      dev = 'driver=rtlsdr'
      stream_args = ''
      tune_args = ['']
      settings = ['']

      ## Intercept the agc callback and restore the gain when agc is
      ## disabled. The driver does not do this. LNA state is preserved.
      def _set_${id}_gain_mode(channel, agc):
          self.${id}.set_gain_mode(channel, agc)
          if not agc:
                self.${id}.set_gain(channel, self.gain)
      self.set_${id}_gain_mode = _set_${id}_gain_mode

      ## Intercept set_gain to keep it from turning off agc mode
      def _set_${id}_gain(channel, name, gain):
          if not self.agc:
              self.${id}.set_gain(channel, gain)
      self.set_${id}_gain = _set_${id}_gain

      self.${id} = soapy.source(dev, "${type}", 1, ${dev_args},
                                stream_args, tune_args, settings)
      self.${id}.set_sample_rate(0, ${samp_rate})
      self.${id}.set_frequency(0, ${center_freq})
      self.${id}.set_frequency_correction(0, ${freq_correction})
      self.${id}.write_setting('biastee', ${bias})
      self.set_${id}_gain_mode(0, ${agc})
      self.set_${id}_gain(0, 'TUNER', ${gain})

  callbacks:
    - set_sample_rate(0, ${samp_rate})
    - set_frequency(0, ${center_freq})
    - set_frequency_correction(0, ${freq_correction})
    - self.set_${id}_gain_mode(0, ${agc})
    - self.set_${id}_gain(0, 'TUNER', ${gain})
    - write_setting('biastee', ${bias})

file_format: 1
