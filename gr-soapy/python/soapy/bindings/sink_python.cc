/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(sink.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(afa5d8f57d64eba3f4c2b4d3e144bf22)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <soapy/sink.h>
// pydoc.h is automatically generated in the build directory
#include <sink_pydoc.h>

void bind_sink(py::module& m)
{

    using sink    = ::gr::soapy::sink;


    py::class_<sink, gr::sync_block, gr::block, gr::basic_block,
        std::shared_ptr<sink>>(m, "sink", D(sink))

        .def(py::init(&sink::make),
           py::arg("nchan"),
           py::arg("device"),
           py::arg("args"),
           py::arg("sampling_rate"),
           py::arg("type"),
           py::arg("length_tag_name") = "",
           D(sink,make)
        )
        




        
        .def("set_gain",(void (sink::*)(size_t, float))&sink::set_gain,       
            py::arg("channel"),
            py::arg("gain"),
            D(sink,set_gain,0)
        )


        
        .def("DC_offset_support",&sink::DC_offset_support,       
            py::arg("channel"),
            D(sink,DC_offset_support)
        )


        
        .def("IQ_balance_support",&sink::IQ_balance_support,       
            py::arg("channel"),
            D(sink,IQ_balance_support)
        )


        
        .def("freq_correction_support",&sink::freq_correction_support,       
            py::arg("channel"),
            D(sink,freq_correction_support)
        )


        
        .def("listAntennas",&sink::listAntennas,       
            py::arg("channel"),
            D(sink,listAntennas)
        )


        
        .def("set_gain",(void (sink::*)(size_t, std::string const, float))&sink::set_gain,       
            py::arg("channel"),
            py::arg("name"),
            py::arg("gain"),
            D(sink,set_gain,1)
        )


        
        .def("set_frequency",(void (sink::*)(size_t, double))&sink::set_frequency,       
            py::arg("channel"),
            py::arg("freq"),
            D(sink,set_frequency,0)
        )


        
        .def("set_frequency",(void (sink::*)(size_t, std::string const &, double))&sink::set_frequency,       
            py::arg("channel"),
            py::arg("name"),
            py::arg("frequency"),
            D(sink,set_frequency,1)
        )


        
        .def("set_gain_mode",&sink::set_gain_mode,       
            py::arg("channel"),
            py::arg("gain_auto_mode"),
            D(sink,set_gain_mode)
        )


        
        .def("set_sample_rate",&sink::set_sample_rate,       
            py::arg("channel"),
            py::arg("sample_rate"),
            D(sink,set_sample_rate)
        )


        
        .def("set_bandwidth",&sink::set_bandwidth,       
            py::arg("channel"),
            py::arg("bandwidth"),
            D(sink,set_bandwidth)
        )


        
        .def("set_antenna",&sink::set_antenna,       
            py::arg("channel"),
            py::arg("name"),
            D(sink,set_antenna)
        )


        
        .def("set_dc_offset",&sink::set_dc_offset,       
            py::arg("channel"),
            py::arg("dc_offset"),
            py::arg("dc_offset_auto_mode"),
            D(sink,set_dc_offset)
        )


        
        .def("set_dc_offset_mode",&sink::set_dc_offset_mode,       
            py::arg("channel"),
            py::arg("dc_offset_auto_mode"),
            D(sink,set_dc_offset_mode)
        )


        
        .def("set_frequency_correction",&sink::set_frequency_correction,       
            py::arg("channel"),
            py::arg("freq_correction"),
            D(sink,set_frequency_correction)
        )


        
        .def("set_iq_balance",&sink::set_iq_balance,       
            py::arg("channel"),
            py::arg("iq_balance"),
            D(sink,set_iq_balance)
        )


        
        .def("set_master_clock_rate",&sink::set_master_clock_rate,       
            py::arg("clock_rate"),
            D(sink,set_master_clock_rate)
        )


        
        .def("set_clock_source",&sink::set_clock_source,       
            py::arg("clock_source"),
            D(sink,set_clock_source)
        )

        ;




}








