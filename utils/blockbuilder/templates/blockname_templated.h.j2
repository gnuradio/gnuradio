{% import 'macros.j2' as macros -%}
{{ macros.header() }}
#pragma once
{% set blocktype_include = blocktype %}
{% if '::' in blocktype_include %}
{% set list = blocktype_include.split('::') %}
{% set blocktype_include = list[(list | length )-1] %}
{% endif %}
#include <gnuradio/{{blocktype_include}}.h>
#include <gnuradio/types.h>

{{ macros.includes(includes) }}

{% set vars = {'py_incl': False} %}
{% for impl in implementations -%}
{% if 'lang' in impl and impl['lang'] == 'python' and not vars.py_incl and GR_ENABLE_PYTHON -%}
#include <pybind11/pybind11.h> // must be first
namespace py = pybind11;
{% if vars.update({'py_incl': True}) %} {% endif %}{% endif %}
{%- endfor -%}


namespace gr {
namespace {{module}} {

template <{% for key in typekeys -%}{{key['type']}} {{key['id']}}{{ ", " if not loop.last }}{%endfor%}>
{{ macros.class_statement(block, blocktype, inherits) }}
{
public:
{{ macros.block_args(parameters) }}
    using sptr = std::shared_ptr<{{ block }}>;
    {{ macros.cotr_statement(block) }};

    {{ macros.implementations(implementations) }}

    {{ macros.callbacks(callbacks) }}    
    {% set vars = {'py_impl': False} %}
    {% for impl in implementations -%}
    {% if 'lang' in impl and impl['lang'] == 'python' and not vars.py_impl and GR_ENABLE_PYTHON -%}
    virtual py::object py_method(const std::string& name, py::tuple args = py::tuple(), py::dict kwargs = py::dict()) {throw std::runtime_error("py_method only defined for python implementations");};
    {% if vars.update({'py_impl': True}) %} {% endif %}{% endif %}
    {%- endfor -%}

{{ macros.parameter_declarations(parameters)}} 


    virtual std::string suffix() override;

protected:
    {{ macros.message_ports(ports) }} 
    
};


{%if typekeys | length == 1 -%}
{%set key1 = typekeys|first %}
{% for opt in key1['options'] -%}
using {{block}}_{{ macros.typekey_suffix(opt, key1['id'],ports) }} = {{block}}<{{ opt | cpp_type }}>;
{% endfor -%}
{% elif typekeys | length == 2 -%}
{%set key1 = typekeys|first %}
{%set key2 = typekeys|last %}
{% for opt1 in key1['options'] -%}
{% for opt2 in key2['options'] -%}
{% if type_inst -%}
{% for typev in type_inst -%}
{% if opt1 == typev['value'][0] and opt2 == typev['value'][1] -%}
using {{block}}_{{ macros.typekey_suffix(opt1, key1['id'],ports) }}{{ macros.typekey_suffix(opt2, key2['id'],ports) }} = {{block}}<{{ opt1 | cpp_type+ ", " + opt2 | cpp_type}}>;
{% endif -%}
{% endfor -%}
{% else -%}
using {{block}}_{{ macros.typekey_suffix(opt1, key1['id'],ports) }}{{ macros.typekey_suffix(opt2, key2['id'],ports) }} = {{block}}<{{ opt1 | cpp_type+ ", " + opt2 | cpp_type}}>;
{% endif -%}
{% endfor -%}
{% endfor -%}
{% else -%}
{%set key1 = typekeys|first %}
{%set key2 = typekeys[1] %}
{%set key3 = typekeys|last %}
{% for opt1 in key1['options'] -%}
{% for opt2 in key2['options'] -%}
{% for opt3 in key3['options'] -%}
{% if type_inst -%}
{% for typev in type_inst -%}
{% if opt1 == typev['value'][0] and opt2 == typev['value'][1] and opt3 == typev['value'][2] -%}
using {{block}}_{{ macros.typekey_suffix(opt1, key1['id'],ports) }}{{ macros.typekey_suffix(opt2, key2['id'],ports) }}{{ macros.typekey_suffix(opt3, key3['id'],ports) }} = {{block}}<{{ opt1 | cpp_type+ ", " + opt2 | cpp_type+ ", " + opt3 | cpp_type}}>;
{% endif %}
{% endfor %}
{%else %}
using {{block}}_{{ macros.typekey_suffix(opt1, key1['id'],ports) }}{{ macros.typekey_suffix(opt2, key2['id'],ports) }}{{ macros.typekey_suffix(opt3, key3['id'],ports) }} = {{block}}<{{ opt1 | cpp_type+ ", " + opt2 | cpp_type+ ", " + opt3 | cpp_type}}>;
{% endif %}
{% endfor -%}
{% endfor -%}
{% endfor -%}
{% endif -%}

} // namespace {{ module }}
} // namespace gr
