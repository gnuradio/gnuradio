{% import 'macros.j2' as macros -%}
{% set typestr = typekeys|map(attribute="id")|join(",")%}

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/{{ module }}/{{ block }}.h>
using namespace gr::{{module}};

template <{% for key in typekeys -%}{{key['type']}} {{key['id']}}{{ ", " if not loop.last }}{%endfor%}>
void bind_{{ block }}_template(py::module& m, const char* classname)
{
    // using block_class = gr::{{ module }}::{{ block }}<{{typestr}}>;

    py::class_<gr::{{ module }}::{{ block }}<{{typestr}}>, {% if inherits %}{% for inh in inherits%}{{inh}},{%endfor%}{%endif%} {% if blocktype != 'block'%} {{ "gr::" if blocktype[:4] != "gr::" }}{{blocktype}},{% endif %}
    gr::block, gr::node,
    std::shared_ptr<gr::{{ module }}::{{ block }}<{{typestr}}>>> {{block}}_class(m, classname);

    py::enum_<typename ::gr::{{ module }}::{{ block }}<{{typestr}}>::available_impl>({{block}}_class, "available_impl")
    {% for impl in implementations -%}
        .value("{{ impl['id'] | lower }}", ::gr::{{module}}::{{block}}<{{typestr}}>::available_impl::{{ impl['id'] | upper }}) 
    {% endfor -%}
        //.value("base", ::gr::{{module}}::{{block}}<{{typestr}}>::available_impl::BASE ) 
        .export_values();

    {{block}}_class.def(py::init([]({% if parameters %}{% for param in parameters -%}{% if 'cotr' not in param or param['cotr']%}{{ param['dtype']|cpp_type(vec=param['container']=='vector') }} {{ param['id'] }},{%endif%} {%endfor%}{% endif %} typename gr::{{module}}::{{block}}<{{typestr}}>::available_impl impl) {
                       return ::gr::{{ module }}::{{block}}<{{typestr}}>::make({ {% if parameters %}{% for param in parameters -%}{% if 'cotr' not in param or param['cotr']%}{{ param['id'] }}{{ ", " if not loop.last }}{% endif %}{%endfor%}{% endif %} }, impl);
                   }),
        {% if parameters %} {% for param in parameters -%}{% if 'cotr' not in param or param['cotr']%}
        py::arg("{{ param['id'] }}"){% if 'default' in param %} = {{param['default']}}{% endif %},{% endif %}
        {% endfor -%} {% endif %}
                   py::arg("impl") = gr::{{module}}::{{block}}<{{typestr}}>::available_impl::{{ implementations[0]['id'] | upper }})
        .def_static("make_from_params", &::gr::{{module}}::{{block}}<{{typestr}}>::make_from_params, 
        py::arg("json_str"),
        py::arg("impl") = gr::{{module}}::{{block}}<{{typestr}}>::available_impl::{{ implementations[0]['id'] | upper }})
        {% for cb in callbacks -%}
        {% if 'binding' in cb %}
        .def("{{cb['id']}}", {{cb['binding']}})
        {% else %}
        .def("{{cb['id']}}", &gr::{{module}}::{{block}}<{{typestr}}>::{{cb['id']}})
        {% endif %}
        {% endfor %} 
        {% for p in parameters -%}
        {% if p['settable'] %}
        .def("set_{{p['id']}}", &gr::{{module}}::{{block}}<{{typestr}}>::set_{{p['id']}})
        {% endif -%}
        {% if p['settable'] and not 'gettable' in p or p['gettable'] %}
        .def("{{p['id']}}", &gr::{{module}}::{{block}}<{{typestr}}>::{{p['id']}})
        {% endif %}
        {% endfor %} 
    {% set vars = {'py_impl': False} %}
    {% for impl in implementations -%}
    {% if 'lang' in impl and impl['lang'] == 'python' and not vars.py_impl -%}
        .def("py_method", &gr::{{module}}::{{block}}<{{typestr}}>::py_method,
            py::arg("name"),
            py::arg("args") = py::tuple(),
            py::arg("kwargs") = py::dict())
    {% if vars.update({'py_impl': True}) %} {% endif %}{% endif %}
    {%- endfor -%}
        ;
}

void bind_{{ block }}(py::module& m)
{
{%if typekeys | length == 1 -%}
{%set key1 = typekeys|first %}
{% for opt in key1['options'] -%}
    bind_{{ block }}_template<{{ opt | cpp_type }}>(m, "{{ block }}_{{macros.typekey_suffix(opt, key1['id'],ports)}}");
{% endfor %}
{% elif typekeys | length == 2 -%}
{%set key1 = typekeys|first %}
{%set key2 = typekeys|last %}
{% for opt1 in key1['options'] -%}
{% for opt2 in key2['options'] -%}
{% if type_inst -%}
{% for typev in type_inst -%}
{% if opt1 == typev['value'][0] and opt2 == typev['value'][1] -%}
    bind_{{ block }}_template<{{ opt1 | cpp_type }}, {{ opt2 | cpp_type}}>(m, "{{ block }}_{{ macros.typekey_suffix(opt1, key1['id'],ports) }}{{ macros.typekey_suffix(opt2, key2['id'],ports) }}");
{% endif %}
{% endfor %}
{% else %}
    bind_{{ block }}_template<{{ opt1 | cpp_type}}, {{ opt2 | cpp_type}}>(m, "{{ block }}_{{ macros.typekey_suffix(opt1, key1['id'],ports) }}{{ macros.typekey_suffix(opt2, key2['id'],ports) }}");
{% endif %}
{% endfor %}
{% endfor %}
{% else -%}
{%set key1 = typekeys|first %}
{%set key2 = typekeys[1] %}
{%set key3 = typekeys|last %}
{% for opt1 in key1['options'] -%}
{% for opt2 in key2['options'] -%}
{% for opt3 in key3['options'] -%}
{% if type_inst -%}
{% for typev in type_inst -%}
{% if opt1 == typev['value'][0] and opt2 == typev['value'][1] and opt3 == typev['value'][2] -%}
    bind_{{ block }}_template<{{ opt1 | cpp_type}}, {{ opt2 | cpp_type}}, {{ opt3 | cpp_type}}>(m, "{{ block }}_{{ macros.typekey_suffix(opt1, key1['id'],ports) }}{{ macros.typekey_suffix(opt2, key2['id'],ports) }}{{ macros.typekey_suffix(opt3, key3['id'],ports) }}");
{% endif %}
{% endfor %}
{% else %}
    bind_{{ block }}_template<{{ opt1 | cpp_type}}, {{ opt2 | cpp_type}}, {{ opt3 | cpp_type}}>(m, "{{ block }}_{{ macros.typekey_suffix(opt1, key1['id'],ports) }}{{ macros.typekey_suffix(opt2, key2['id'],ports) }}{{ macros.typekey_suffix(opt3, key3['id'],ports) }}");
{% endif %}
{% endfor %}
{% endfor %}
{% endfor %}
{% endif %}
}
