id: rational_resampler_xxx
label: Rational Resampler
flags: [ python, cpp ]

parameters:
-   id: type
    label: Type
    dtype: enum
    options: [ccc, ccf, fcc, fff]
    option_labels: [Complex->Complex (Complex Taps), Complex->Complex (Real Taps),
        Float->Complex (Complex Taps), Float->Float (Real Taps)]
    option_attributes:
        input: [complex, complex, float, float]
        output: [complex, complex, complex, float]
        taps: [complex_vector, real_vector, complex_vector, real_vector]
    hide: part
-   id: interp
    label: Interpolation
    dtype: int
    default: '1'
-   id: decim
    label: Decimation
    dtype: int
    default: '1'
-   id: taps
    label: Taps
    dtype: ${ type.taps }
-   id: fbw
    label: Fractional BW
    dtype: real
    default: '0'

inputs:
-   domain: stream
    dtype: ${ type.input }

outputs:
-   domain: stream
    dtype: ${ type.output }

templates:
    imports: |-
        from gnuradio import filter
        from gnuradio.filter import firdes
    make: |-
        filter.rational_resampler_${type}(
                interpolation=${interp},
                decimation=${decim},
        % if taps:
                taps=${taps},
        % else:
                taps=None,
        % endif
        % if float(fbw) != 0:
                fractional_bw=${fbw})
        % else:
                fractional_bw=None)
        % endif
    callbacks:
    - set_taps(${taps})

cpp_templates:
    includes: ['#include <gnuradio/filter/rational_resampler_base.h>']
    declarations: 'gr::filter::rational_resampler_base_${type}::sptr ${id};'
    make: |-
        <% 
            taps = self.context.get('taps')
            try: taps
            except (NameError): taps = None 
            taps = None if (len(taps) == 0) else taps
        %>
        % if taps == None or len(taps) == 0:
            <%
            # Leverage python module to generate default values for taps
            from gnuradio import filter 
            %>
            <% 
               fbw = self.context.get('fbw')
               fbw = float(fbw) if (len(fbw) > 0 and float(fbw) != 0) else None
               iotype = self.context.get('type')
               ftype = eval('filter.rational_resampler.rational_resampler_' + str(iotype)) 
               fltr = ftype(int(self.context.get('interp')), int(self.context.get('decim')), taps, fbw) 
               taps = fltr.taps() 
               # Format complex taps values for C++
               if iotype == 'fcc' or iotype == 'ccc': 
                   cmplx_taps = []
                   for cmplx in taps: 
                       cmplx_taps.append({cmplx.real, cmplx.imag})
                   taps = cmplx_taps
            %>
        % endif

        % if str(type.taps) == "complex_vector":
        std::vector<gr_complex> taps = {${str(taps)[1:-1]}};
        % else:
        std::vector<float> taps = {${str(taps)[1:-1]}};
        % endif
        this->${id} = gr::filter::rational_resampler_base_${type}::make(
            ${interp},
            ${decim},
            taps);
    link: ['gnuradio-filter']
    callbacks:
    - set_taps(${taps})

documentation: |-
    This is a rational resampling polyphase FIR filter.

    Either taps or fractional_bw may be specified, but not both.

    If neither is specified, a reasonable default, 0.4, is used as the fractional_bw.
    
    Parameters:
    Interpolation
        Interpolation factor (integer > 0)
    
    Decimation
        Decimation factor (integer > 0)
    
    Taps (R)
        Optional filter coefficients (sequence)
    
    Fractional BW
        Fractional bandwidth in (0, 0.5), measured at final freq (use 0.4) (float)

file_format: 1
