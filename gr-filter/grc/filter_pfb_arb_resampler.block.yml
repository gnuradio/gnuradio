id: pfb_arb_resampler_xxx
label: Polyphase Arbitrary Resampler
flags: [ python, cpp ]

parameters:
-   id: type
    label: Type
    dtype: enum
    options: [ccf, fff, ccc]
    option_labels: [Complex->Complex (Real Taps), Float->Float (Real Taps), Complex->Complex
            (Complex Taps)]
    option_attributes:
        input: [complex, float, complex]
        output: [complex, float, complex]
        taps: [real_vector, real_vector, complex_vector]
    hide: part
-   id: rrate
    label: Resampling Rate
    dtype: real
-   id: taps
    label: Taps
    dtype: ${ type.taps }
-   id: nfilts
    label: Number of Filters
    dtype: int
    default: '32'
-   id: atten
    label: Stop-band Attenuation
    dtype: real
    default: '100'
-   id: samp_delay
    label: Sample Delay
    dtype: int
    default: '0'
    hide: part

inputs:
-   domain: stream
    dtype: ${ type.input }

outputs:
-   domain: stream
    dtype: ${ type.output }

templates:
    imports: |-
        from gnuradio.filter import pfb
        from gnuradio.filter import firdes
    make: |-
        pfb.arb_resampler_${type}(
            ${rrate},
            taps=${ taps if taps else 'None' },
            flt_size=${nfilts})
        self.${id}.declare_sample_delay(${samp_delay})
    callbacks:
    - set_taps(${taps})
    - set_rate(${rrate})

cpp_templates:
    includes: ['#include <gnuradio/filter/pfb.arb_resampler_${type}.h>']
    declarations: 'pfb::arb_resampler_${type}::sptr ${id};'
    make: |-
        % if str(type.taps) == "complex_vector":
        std::vector<gr_complex> taps = {${str(taps)[1:-1]}};
        % else:
        std::vector<float> taps = {${str(taps)[1:-1]}};
        % endif
        this->${id} =pfb::arb_resampler_${type}::make(
            ${rrate},
            taps=${ taps if taps else 'None' },
            flt_size=${nfilts});
        this->${id}.declare_sample_delay(${samp_delay});
    link: ['gnuradio-filter']
    callbacks:
    - set_taps(taps)
    - set_rate(${rrate})

file_format: 1
