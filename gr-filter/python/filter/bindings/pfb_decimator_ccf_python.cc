/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(pfb_decimator_ccf.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(c5b86590e4f51a1b90b5b5464ee0fca1)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/filter/pfb_decimator_ccf.h>
// pydoc.h is automatically generated in the build directory
#include <pfb_decimator_ccf_pydoc.h>

void bind_pfb_decimator_ccf(py::module& m)
{

    using pfb_decimator_ccf = ::gr::filter::pfb_decimator_ccf;


    py::class_<pfb_decimator_ccf,
               gr::sync_block,
               gr::block,
               gr::basic_block,
               std::shared_ptr<pfb_decimator_ccf>>(
        m, "pfb_decimator_ccf", D(pfb_decimator_ccf))

        .def(py::init(&pfb_decimator_ccf::make),
             py::arg("decim"),
             py::arg("taps"),
             py::arg("channel"),
             py::arg("use_fft_rotator") = true,
             py::arg("use_fft_filters") = true,
             D(pfb_decimator_ccf, make))


        .def("set_taps",
             &pfb_decimator_ccf::set_taps,
             py::arg("taps"),
             D(pfb_decimator_ccf, set_taps))


        .def("taps", &pfb_decimator_ccf::taps, D(pfb_decimator_ccf, taps))


        .def("print_taps",
             &pfb_decimator_ccf::print_taps,
             D(pfb_decimator_ccf, print_taps))


        .def("set_channel",
             &pfb_decimator_ccf::set_channel,
             py::arg("channel"),
             D(pfb_decimator_ccf, set_channel))

        ;
}
