/*
 * Copyright 2020,2021 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(window.h)                                                  */
/* BINDTOOL_HEADER_FILE_HASH(872e1911444c9a5982f4d00af81a2def)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/kernel/fft/window.h>

void bind_window(py::module& m)
{
    using window = gr::kernel::fft::window;

    py::class_<window, std::shared_ptr<window>> window_class(m, "window");

    py::enum_<gr::kernel::fft::window::window_t>(window_class, "window_t")
        .value("HAMMING", gr::kernel::fft::window::HAMMING)                   // 0
        .value("HANN", gr::kernel::fft::window::HANN)                         // 1
        .value("HANNING", gr::kernel::fft::window::HANNING)                   // 1
        .value("BLACKMAN", gr::kernel::fft::window::BLACKMAN)                 // 2
        .value("RECTANGULAR", gr::kernel::fft::window::RECTANGULAR)           // 3
        .value("KAISER", gr::kernel::fft::window::KAISER)                     // 4
        .value("BLACKMAN_hARRIS", gr::kernel::fft::window::BLACKMAN_hARRIS)   // 5
        .value("BLACKMAN_HARRIS", gr::kernel::fft::window::BLACKMAN_HARRIS)   // 5
        .value("BARTLETT", gr::kernel::fft::window::BARTLETT)                 // 6
        .value("FLATTOP", gr::kernel::fft::window::FLATTOP)                   // 7
        .value("NUTTALL", gr::kernel::fft::window::NUTTALL)                   // 8
        .value("BLACKMAN_NUTTALL", gr::kernel::fft::window::BLACKMAN_NUTTALL) // 8
        .value("NUTTALL_CFD", gr::kernel::fft::window::NUTTALL_CFD)           // 9
        .value("WELCH", gr::kernel::fft::window::WELCH)                       // 10
        .value("PARZEN", gr::kernel::fft::window::PARZEN)                     // 11
        .value("EXPONENTIAL", gr::kernel::fft::window::EXPONENTIAL)           // 12
        .value("RIEMANN", gr::kernel::fft::window::RIEMANN)                   // 13
        .value("GAUSSIAN", gr::kernel::fft::window::GAUSSIAN)                 // 14
        .value("TUKEY", gr::kernel::fft::window::TUKEY)                       // 15
        .export_values();

    py::implicitly_convertible<int, gr::kernel::fft::window::window_t>();

    window_class
        .def_static("max_attenuation",
                    &window::max_attenuation,
                    py::arg("type"),
                    py::arg("param") = 6.7599999999999998)


        .def_static("coswindow",
                    (std::vector<float>(*)(int, float, float, float)) & window::coswindow,
                    py::arg("ntaps"),
                    py::arg("c0"),
                    py::arg("c1"),
                    py::arg("c2"))


        .def_static("coswindow",
                    (std::vector<float>(*)(int, float, float, float, float)) &
                        window::coswindow,
                    py::arg("ntaps"),
                    py::arg("c0"),
                    py::arg("c1"),
                    py::arg("c2"),
                    py::arg("c3"))


        .def_static("coswindow",
                    (std::vector<float>(*)(int, float, float, float, float, float)) &
                        window::coswindow,
                    py::arg("ntaps"),
                    py::arg("c0"),
                    py::arg("c1"),
                    py::arg("c2"),
                    py::arg("c3"),
                    py::arg("c4"))


        .def_static("rectangular", &window::rectangular, py::arg("ntaps"))


        .def_static("hamming", &window::hamming, py::arg("ntaps"))


        .def_static("hann", &window::hann, py::arg("ntaps"))


        .def_static("hanning", &window::hanning, py::arg("ntaps"))


        .def_static("blackman", &window::blackman, py::arg("ntaps"))


        .def_static("blackman2", &window::blackman2, py::arg("ntaps"))


        .def_static("blackman3", &window::blackman3, py::arg("ntaps"))


        .def_static("blackman4", &window::blackman4, py::arg("ntaps"))


        .def_static("blackman_harris",
                    &window::blackman_harris,
                    py::arg("ntaps"),
                    py::arg("atten") = 92)


        .def_static("blackmanharris",
                    &window::blackmanharris,
                    py::arg("ntaps"),
                    py::arg("atten") = 92)


        .def_static("nuttall", &window::nuttall, py::arg("ntaps"))


        .def_static("blackman_nuttall", &window::blackman_nuttall, py::arg("ntaps"))


        .def_static("nuttall_cfd", &window::nuttall_cfd, py::arg("ntaps"))


        .def_static("flattop", &window::flattop, py::arg("ntaps"))


        .def_static("kaiser", &window::kaiser, py::arg("ntaps"), py::arg("beta"))


        .def_static("bartlett", &window::bartlett, py::arg("ntaps"))


        .def_static("welch", &window::welch, py::arg("ntaps"))


        .def_static("parzen", &window::parzen, py::arg("ntaps"))


        .def_static("exponential", &window::exponential, py::arg("ntaps"), py::arg("d"))


        .def_static("riemann", &window::riemann, py::arg("ntaps"))


        .def_static("tukey", &window::tukey, py::arg("ntaps"), py::arg("alpha"))


        .def_static("gaussian", &window::gaussian, py::arg("ntaps"), py::arg("sigma"))


        .def_static("build",
                    &window::build,
                    py::arg("type"),
                    py::arg("ntaps"),
                    py::arg("param") = 6.76,
                    py::arg("normalize") = false)

        ;
}
