id: iio_pluto_sink
label: PlutoSDR Sink
flags: [ python, throttle ]

parameters:
-   id: type
    label: Input Type
    dtype: enum
    options: [fc32, sc16]
    option_labels: [Complex float32, Complex int16]
    option_attributes:
        type: [fc32, sc16]
    hide: part

-   id: uri
    label: IIO context URI
    dtype: string
    default: ''

-   id: frequency
    label: LO Frequency
    dtype: int
    default: 2400000000

-   id: samplerate
    label: Sample Rate
    dtype: int
    default: samp_rate

-   id: buffer_size
    label: Buffer size
    dtype: int
    default: 0x8000

-   id: cyclic
    label: Cyclic
    dtype: bool
    default: 'False'
    options: ['False', 'True']
    option_labels: ['False', 'True']

-   id: attenuation1
    label: Attenuation TX1 (dB)
    dtype: float
    default: 10.0

-   id: len_tag_key
    label: Packet Length Tag
    dtype: string
    hide: ${( 'part' )}

-   id: filter_source
    category: Filter
    label: Filter Configuration
    dtype: enum
    default: "'Auto'"
    options: ["'Off'", "'Auto'", "'File'", "'Design'"]
    option_labels: ['Off', 'Auto', 'File', 'Design']

-   id: filter
    category: Filter
    label: Filter
    dtype: file_open
    default: ''
    hide: ${ ('none' if filter_source == "'File'" else 'all') }

-   id: fpass
    category: Filter
    label: Fpass (Hz)
    dtype: float
    default: 0
    hide: ${ ('none' if filter_source == "'Design'" else 'all') }

-   id: fstop
    category: Filter
    label: Fstop (Hz)
    dtype: float
    default: 0
    hide: ${ ('none' if filter_source == "'Design'" else 'all') }

-   id: bandwidth
    category: Filter
    label: RF Bandwidth (Hz)
    dtype: int
    default: 20000000
    hide: ${ ('all' if filter_source == "'File'" else 'none') }

inputs:
-   domain: stream
    dtype: ${type.type}

asserts:
- ${ ((samplerate>=2084000) or (filter_source!="'Off'")) }
- ${ ((filter_source!="'File'") or (len(filter)>0)) }
- ${ ((samplerate<=61440000) and (samplerate>=65105)) }
- ${ ((bandwidth<=40000000) and (bandwidth>=200000)) }
- ${ ((frequency<=6000000000) and (frequency>=47000000)) }
- ${ ((filter_source!="'Design'") or (fpass<=samplerate)) }
- ${ ((filter_source!="'Design'") or (fstop<=samplerate)) }
- ${ ((filter_source!="'Design'") or (fstop>fpass)) }

templates:
    imports: from gnuradio import iio
    make: |
        iio.fmcomms2_sink_${type.type}(${uri} if ${uri} else iio.get_pluto_uri(), [True, True], ${buffer_size}, ${cyclic})
        self.${id}.set_len_tag_key(${len_tag_key})
        self.${id}.set_bandwidth(${bandwidth})
        self.${id}.set_frequency(${frequency})
        self.${id}.set_samplerate(${samplerate})
        self.${id}.set_attenuation(0, ${attenuation1})
        self.${id}.set_filter_params(${filter_source}, ${filter}, ${fpass}, ${fstop})
    callbacks:
        - set_bandwidth(${bandwidth})
        - set_frequency(${frequency})
        - set_samplerate(${samplerate})
        - set_attenuation(${attenuation1})
        - set_filter_params(${filter_source}, ${filter}, ${fpass}, ${fstop})

file_format: 1
