/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(fmcomms2_source_fc32.h)                                    */
/* BINDTOOL_HEADER_FILE_HASH(ac7fd629916d34fa7785ef97b2d1d1ef)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/iio/fmcomms2_source_fc32.h>
// pydoc.h is automatically generated in the build directory
#include <fmcomms2_source_f32c_pydoc.h>

void bind_fmcomms2_source_f32c(py::module& m)
{

    using fmcomms2_source_f32c = gr::iio::fmcomms2_source_f32c;


    py::class_<fmcomms2_source_f32c,
               gr::hier_block2,
               gr::basic_block,
               std::shared_ptr<fmcomms2_source_f32c>>(
        m, "fmcomms2_source_f32c", D(fmcomms2_source_f32c))

        .def(py::init(&fmcomms2_source_f32c::make),
             py::arg("uri"),
             py::arg("ch_en"),
             py::arg("buffer_size"),
             D(fmcomms2_source_f32c, make))

        //    .def("set_params",
        //         &fmcomms2_source_f32c::set_params,
        //         py::arg("longfrequency"),
        //         py::arg("samplerate"),
        //         py::arg("bandwidth"),
        //         py::arg("quadrature"),
        //         py::arg("rfdc"),
        //         py::arg("bbdc"),
        //         py::arg("gain1"),
        //         py::arg("gain1_value"),
        //         py::arg("gain2"),
        //         py::arg("gain2_value"),
        //         py::arg("rf_port_select"),
        //         py::arg("filter_source") = "",
        //         py::arg("filter_filename") = "",
        //         py::arg("Fpass") = 0.0,
        //         py::arg("Fstop") = 0.0,
        //         D(fmcomms2_source_f32c, set_params))

        ;
}
