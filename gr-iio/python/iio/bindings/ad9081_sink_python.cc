/* -*- c++ -*- */
/*
 * Copyright 2021 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(ad9081_sink.h)                                             */
/* BINDTOOL_HEADER_FILE_HASH(6887f3848855cba2ec10c935755a7911)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/iio/ad9081_sink.h>
// pydoc.h is automatically generated in the build directory
#include <ad9081_common_pydoc.h>
#include <ad9081_sink_pydoc.h>

void bind_ad9081_sink(py::module& m)
{

    using ad9081_sink = gr::iio::ad9081_sink;
    using ad9081_common = gr::iio::ad9081_common;

    py::class_<ad9081_sink, gr::basic_block, std::shared_ptr<ad9081_sink>>(
        m, "ad9081_sink", D(ad9081_sink))

        .def_readonly_static("MAX_CHANNEL_COUNT", &ad9081_common::MAX_CHANNEL_COUNT)
        .def_readonly_static("N_FNCO", &ad9081_common::N_FNCO)
        .def_readonly_static("N_CNCO", &ad9081_common::N_CNCO)

        .def(py::init(&ad9081_sink::make),
             py::arg("uri"),
             py::arg("en"),
             py::arg("buffer_size") = 65536UL,
             py::arg("cyclic") = false,
             D(ad9081_sink, make))

        .def(
            "set_main_nco_freq",
            [](ad9081_sink& sink, int nco, int64_t freq) {
                sink.set_main_nco_freq(nco, freq);
            },
            py::arg("nco"),
            py::arg("freq"),
            D(ad9081_common, set_main_nco_freq))

        .def(
            "set_main_nco_phase",
            [](ad9081_sink& sink, int nco, float phase) {
                sink.set_main_nco_phase(nco, phase);
            },
            py::arg("nco"),
            py::arg("phase"),
            D(ad9081_common, set_main_nco_phase))

        .def(
            "set_channel_nco_freq",
            [](ad9081_sink& sink, int nco, int64_t freq) {
                sink.set_main_nco_freq(nco, freq);
            },
            py::arg("nco"),
            py::arg("freq"),
            D(ad9081_common, set_channel_nco_freq))

        .def(
            "set_channel_nco_phase",
            [](ad9081_sink& sink, int nco, float phase) {
                sink.set_main_nco_phase(nco, phase);
            },
            py::arg("nco"),
            py::arg("freq"),
            D(ad9081_common, set_channel_nco_phase));


    using ad9081_sink_f32c = gr::iio::ad9081_sink_f32c;

    py::class_<ad9081_sink_f32c, gr::hier_block2, std::shared_ptr<ad9081_sink_f32c>>(
        m, "ad9081_sink_f32c", D(ad9081_sink_f32c))

        .def(py::init(&ad9081_sink_f32c::make),
             py::arg("uri"),
             py::arg("en"),
             py::arg("buffer_size") = 65536UL,
             py::arg("cyclic") = false,
             D(ad9081_sink_f32c, make))

        .def("set_main_nco_freq",
             &ad9081_sink_f32c::set_main_nco_freq,
             py::arg("nco"),
             py::arg("freq"),
             D(ad9081_sink_f32c, set_main_nco_freq))

        .def("set_main_nco_phase",
             &ad9081_sink_f32c::set_main_nco_phase,
             py::arg("nco"),
             py::arg("phase"),
             D(ad9081_sink_f32c, set_main_nco_phase))

        .def("set_channel_nco_freq",
             &ad9081_sink_f32c::set_channel_nco_freq,
             py::arg("nco"),
             py::arg("freq"),
             D(ad9081_sink_f32c, set_channel_nco_freq))

        .def("set_channel_nco_phase",
             &ad9081_sink_f32c::set_channel_nco_phase,
             py::arg("nco"),
             py::arg("freq"),
             D(ad9081_sink_f32c, set_channel_nco_phase));
}
