/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(async_encoder.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(649f230c87c613a0baecd019a8870470)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/fec/async_encoder.h>
// pydoc.h is automatically generated in the build directory
#include <async_encoder_pydoc.h>

void bind_async_encoder(py::module& m)
{

    using async_encoder = ::gr::fec::async_encoder;


    py::class_<async_encoder, gr::block, gr::basic_block, std::shared_ptr<async_encoder>>(
        m, "async_encoder", D(async_encoder))

        .def(py::init(&async_encoder::make),
             py::arg("my_encoder"),
             py::arg("packed") = false,
             py::arg("rev_unpack") = true,
             py::arg("rev_pack") = true,
             py::arg("mtu") = 1500,
             D(async_encoder, make))


        .def("general_work",
             &async_encoder::general_work,
             py::arg("noutput_items"),
             py::arg("ninput_items"),
             py::arg("input_items"),
             py::arg("output_items"),
             D(async_encoder, general_work))

        ;
}
