/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(polar_decoder_sc.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(8197faa9638d564c84e0e54b25b244b5)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/fec/polar_decoder_sc.h>
// pydoc.h is automatically generated in the build directory
#include <polar_decoder_sc_pydoc.h>

void bind_polar_decoder_sc(py::module& m)
{


    py::module m_code = m.def_submodule("code");

    using polar_decoder_sc = ::gr::fec::code::polar_decoder_sc;


    py::class_<polar_decoder_sc,
               gr::fec::code::polar_decoder_common,
               std::shared_ptr<polar_decoder_sc>>(
        m_code, "polar_decoder_sc", D(code, polar_decoder_sc))

        .def_static("make",
                    &polar_decoder_sc::make,
                    py::arg("block_size"),
                    py::arg("num_info_bits"),
                    py::arg("frozen_bit_positions"),
                    py::arg("frozen_bit_values"),
                    D(code, polar_decoder_sc, make))


        .def("generic_work",
             &polar_decoder_sc::generic_work,
             py::arg("in_buffer"),
             py::arg("out_buffer"),
             D(code, polar_decoder_sc, generic_work))

        ;
}
