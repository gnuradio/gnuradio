options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: epy_block_io_example
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 12]
    rotation: 0
    state: enabled
- name: blocks_null_sink_0
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '1'
    type: complex
    vlen: '64'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 224.0]
    rotation: 0
    state: enabled
- name: blocks_null_source_0
  id: blocks_null_source
  parameters:
    affinity: ''
    alias: ''
    bus_structure_source: '[[0,],]'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_outputs: '1'
    type: complex
    vlen: '64'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [104, 224.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\n\nclass blk(gr.sync_block):\n\
      \    # Note: the vlen defaults to 1\n    def __init__(self, vlen=1):\n     \
      \   gr.sync_block.__init__(\n            self,\n            name='Test Vector\
      \ IO extraction',\n            in_sig=[(np.complex64, vlen)],\n            out_sig=[(np.complex64,\
      \ vlen)]\n        )\n\n    def work(self, input_items, output_items):\n    \
      \    output_items[0][:][:] = input_items[0][:][:]\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '64'
  states:
    _io_cache: ('Test Vector IO extraction', 'blk', [('vlen', '1')], [('0', 'complex',
      64)], [('0', 'complex', 64)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 224.0]
    rotation: 0
    state: enabled

connections:
- [blocks_null_source_0, '0', epy_block_0, '0']
- [epy_block_0, '0', blocks_null_sink_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.11.0
