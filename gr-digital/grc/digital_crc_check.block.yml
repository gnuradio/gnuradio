id: digital_crc_check
label: CRC Check
flags: [ python, cpp ]

parameters:
-   id: num_bits
    label: CRC size (bits)
    dtype: int
    default: 32
    hide: part
-   id: poly
    label: CRC polynomial
    dtype: hex
    default: '0x4C11DB7'
-   id: initial_value
    label: Initial regsiter value
    dtype: hex
    default: '0xFFFFFFFF'
    hide: part
-   id: final_xor
    label: Final XOR value
    dtype: hex
    default: '0xFFFFFFFF'
    hide: part
-   id: input_reflected
    label: LSB-first input
    dtype: bool
    default: True
    hide: part
-   id: result_reflected
    label: LSB-first result
    dtype: bool
    default: True
    hide: part
-   id: swap_endianness
    label: LSB CRC in PDU
    dtype: bool
    default: False
    hide: part
-   id: discard_crc
    label: Discard CRC
    dtype: bool
    default: False
    hide: part
-   id: skip_header_bytes
    label: Header bytes to skip
    dtype: int
    default: 0
    hide: part

inputs:
-   domain: message
    id: in

outputs:
-   domain: message
    id: ok
    optional: true
-   domain: message
    id: fail
    optional: true

templates:
    imports: from gnuradio import digital
    make: digital.crc_check(${num_bits}, ${poly}, ${initial_value}, ${final_xor}, ${input_reflected}, ${result_reflected}, ${swap_endianness}, ${discard_crc}, ${skip_header_bytes})

cpp_templates:
    includes: ['#include <gnuradio/digital/crc_check.h>']
    declarations: 'digital::crc_check::sptr ${id};'
    make: |-
        this->${id} = digital::crc_check::make(
            ${num_bits}, ${poly}, ${initial_value}, ${final_xor},
            ${input_reflected}, ${result_reflected}, ${swap_endianness},
            ${discard_crc}, ${skip_header_bytes});
    link: ['gnuradio-digital']
    translations:
        'True': 'true'
        'False': 'false'

file_format: 1
