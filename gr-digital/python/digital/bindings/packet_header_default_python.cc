/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(packet_header_default.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(986c8fe960c6f0510304dc660e276e34)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/digital/packet_header_default.h>
// pydoc.h is automatically generated in the build directory
#include <packet_header_default_pydoc.h>

void bind_packet_header_default(py::module& m)
{

    using packet_header_default = ::gr::digital::packet_header_default;


    py::class_<packet_header_default, std::shared_ptr<packet_header_default>>(
        m, "packet_header_default", D(packet_header_default))

        .def(py::init(&packet_header_default::make),
             py::arg("header_len"),
             py::arg("len_tag_key") = "packet_len",
             py::arg("num_tag_key") = "packet_num",
             py::arg("bits_per_byte") = 1,
             D(packet_header_default, make))


        .def("base", &packet_header_default::base, D(packet_header_default, base))


        .def("formatter",
             &packet_header_default::formatter,
             D(packet_header_default, formatter))


        .def("set_header_num",
             &packet_header_default::set_header_num,
             py::arg("header_num"),
             D(packet_header_default, set_header_num))


        .def("header_len",
             &packet_header_default::header_len,
             D(packet_header_default, header_len))


        .def("len_tag_key",
             &packet_header_default::len_tag_key,
             D(packet_header_default, len_tag_key))


        .def("header_formatter",
             &packet_header_default::header_formatter,
             py::arg("packet_len"),
             py::arg("out"),
             py::arg("tags") = std::vector<gr::tag_t>(),
             D(packet_header_default, header_formatter))


        .def("header_parser",
             &packet_header_default::header_parser,
             py::arg("header"),
             py::arg("tags"),
             D(packet_header_default, header_parser))


        ;
}
