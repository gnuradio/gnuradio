/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(cma_equalizer_cc.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(3d7ebc78bf6a6c712f19f13f3e20648a)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/digital/cma_equalizer_cc.h>
// pydoc.h is automatically generated in the build directory
#include <cma_equalizer_cc_pydoc.h>

void bind_cma_equalizer_cc(py::module& m)
{

    using cma_equalizer_cc = ::gr::digital::cma_equalizer_cc;


    py::class_<cma_equalizer_cc,
               gr::sync_decimator,
               gr::sync_block,
               gr::block,
               gr::basic_block,
               std::shared_ptr<cma_equalizer_cc>>(
        m, "cma_equalizer_cc", D(cma_equalizer_cc))

        .def(py::init(&cma_equalizer_cc::make),
             py::arg("num_taps"),
             py::arg("modulus"),
             py::arg("mu"),
             py::arg("sps"),
             D(cma_equalizer_cc, make))


        .def("set_taps",
             &cma_equalizer_cc::set_taps,
             py::arg("taps"),
             D(cma_equalizer_cc, set_taps))


        .def("taps", &cma_equalizer_cc::taps, D(cma_equalizer_cc, taps))


        .def("gain", &cma_equalizer_cc::gain, D(cma_equalizer_cc, gain))


        .def("set_gain",
             &cma_equalizer_cc::set_gain,
             py::arg("mu"),
             D(cma_equalizer_cc, set_gain))


        .def("modulus", &cma_equalizer_cc::modulus, D(cma_equalizer_cc, modulus))


        .def("set_modulus",
             &cma_equalizer_cc::set_modulus,
             py::arg("mod"),
             D(cma_equalizer_cc, set_modulus))

        ;
}
