/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/* This file is automatically generated using bindtool */

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/qtgui/utils.h>
#include <qwt_legend.h>
#include <qwt_painter.h>
#include <qwt_plot.h>
#include <qwt_plot_canvas.h>
#include <qwt_plot_curve.h>
#include <qwt_plot_magnifier.h>
#include <qwt_plot_marker.h>
#include <qwt_plot_panner.h>
#include <qwt_plot_zoomer.h>
#include <qwt_scale_engine.h>
#include <qwt_scale_widget.h>
#include <qwt_symbol.h>

#include <gnuradio/qtgui/sink.h>
// pydoc.h is automatically generated in the build directory
#include <sink_pydoc.h>

template <class T>
void bind_sink_template(py::module& m, const char* classname)
{

    using sink = ::gr::qtgui::sink<T>;


    py::class_<sink, gr::block, gr::basic_block, std::shared_ptr<sink>>(
        m, classname, D(sink))

        .def(py::init(&sink::make),
             py::arg("fftsize"),
             py::arg("wintype"),
             py::arg("fc"),
             py::arg("bw"),
             py::arg("name"),
             py::arg("plotfreq"),
             py::arg("plotwaterfall"),
             py::arg("plottime"),
             py::arg("plotconst"),
             py::arg("parent") = nullptr,
             D(sink, make))


        .def("exec_", &sink::exec_, D(sink, exec_))


        .def(
            "qwidget",
            [](sink& self) { return reinterpret_cast<uintptr_t>(self.qwidget()); },
            D(sink, qwidget))


        .def("set_fft_size",
             &sink::set_fft_size,
             py::arg("fftsize"),
             D(sink, set_fft_size))


        .def("fft_size", &sink::fft_size, D(sink, fft_size))


        .def("set_frequency_range",
             &sink::set_frequency_range,
             py::arg("centerfreq"),
             py::arg("bandwidth"),
             D(sink, set_frequency_range))


        .def("set_fft_power_db",
             &sink::set_fft_power_db,
             py::arg("min"),
             py::arg("max"),
             D(sink, set_fft_power_db))


        .def("enable_rf_freq",
             &sink::enable_rf_freq,
             py::arg("en"),
             D(sink, enable_rf_freq))


        .def("set_update_time",
             &sink::set_update_time,
             py::arg("t"),
             D(sink, set_update_time))

        ;
}

void bind_sink(py::module& m)
{
    bind_sink_template<float>(m, "sink_f");
    bind_sink_template<gr_complex>(m, "sink_c");
}
