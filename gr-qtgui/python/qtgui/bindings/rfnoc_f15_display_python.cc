/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(rfnoc_f15_display.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(9ba8d496dc1abb2f76017bf7ee0f40ce)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/qtgui/utils.h>
#include <qwt_legend.h>
#include <qwt_painter.h>
#include <qwt_plot.h>
#include <qwt_plot_canvas.h>
#include <qwt_plot_curve.h>
#include <qwt_plot_magnifier.h>
#include <qwt_plot_marker.h>
#include <qwt_plot_panner.h>
#include <qwt_plot_zoomer.h>
#include <qwt_scale_engine.h>
#include <qwt_scale_widget.h>
#include <qwt_symbol.h>

#include <gnuradio/qtgui/rfnoc_f15_display.h>
// pydoc.h is automatically generated in the build directory
#include <rfnoc_f15_display_pydoc.h>

void bind_rfnoc_f15_display(py::module& m)
{

    using rfnoc_f15_display = ::gr::qtgui::rfnoc_f15_display;


    py::class_<rfnoc_f15_display,
               gr::block,
               gr::basic_block,
               std::shared_ptr<rfnoc_f15_display>>(
        m, "rfnoc_f15_display", D(rfnoc_f15_display))

        .def(py::init(&rfnoc_f15_display::make),
             py::arg("fft_bins") = 256,
             py::arg("pwr_bins") = 64,
             py::arg("wf_lines") = 512,
             py::arg("parent") = nullptr,
             D(rfnoc_f15_display, make))


        .def("set_frequency_range",
             &rfnoc_f15_display::set_frequency_range,
             py::arg("center_freq"),
             py::arg("samp_rate"),
             D(rfnoc_f15_display, set_frequency_range))


        .def("set_waterfall",
             &rfnoc_f15_display::set_waterfall,
             py::arg("enabled"),
             D(rfnoc_f15_display, set_waterfall))


        .def("set_grid",
             &rfnoc_f15_display::set_grid,
             py::arg("enabled"),
             D(rfnoc_f15_display, set_grid))


        .def("set_palette",
             &rfnoc_f15_display::set_palette,
             py::arg("name"),
             D(rfnoc_f15_display, set_palette))


        .def("set_frame_rate",
             &rfnoc_f15_display::set_frame_rate,
             py::arg("fps"),
             D(rfnoc_f15_display, set_frame_rate))


        .def("exec_", &rfnoc_f15_display::exec_, D(rfnoc_f15_display, exec_))


        .def(
            "qwidget",
            [](rfnoc_f15_display& self) {
                return reinterpret_cast<uintptr_t>(self.qwidget());
            },
            D(rfnoc_f15_display, qwidget))

        ;
}
