/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(unpacked_to_packed.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(f38bf55a7331f33d1a4b4fffdc1a20fa)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/blocks/unpacked_to_packed.h>

template <typename T>
void bind_unpacked_to_packed_template(py::module& m, const char* classname)
{
    using unpacked_to_packed = gr::blocks::unpacked_to_packed<T>;

    py::class_<unpacked_to_packed,
               gr::block,
               gr::basic_block,
               std::shared_ptr<unpacked_to_packed>>(m, classname)
        .def(py::init(&gr::blocks::unpacked_to_packed<T>::make),
             py::arg("bits_per_chunk"),
             py::arg("endianness"));
}

void bind_unpacked_to_packed(py::module& m)
{
    bind_unpacked_to_packed_template<std::int16_t>(m, "unpacked_to_packed_ss");
    bind_unpacked_to_packed_template<std::int32_t>(m, "unpacked_to_packed_ii");
    bind_unpacked_to_packed_template<std::uint8_t>(m, "unpacked_to_packed_bb");
}
