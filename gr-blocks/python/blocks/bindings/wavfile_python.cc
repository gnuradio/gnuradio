/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(wavfile.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(85a13746fd109dbc7b94ba38aaf61e4c)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/blocks/wavfile.h>
// pydoc.h is automatically generated in the build directory
#include <wavfile_pydoc.h>

void bind_wavfile(py::module& m)
{
    using wav_header_info = gr::blocks::wav_header_info;

    py::class_<wav_header_info, std::shared_ptr<wav_header_info>>(m, "wav_header_info")
        .def_readwrite("sample_rate", &wav_header_info::sample_rate)
        .def_readwrite("nchans", &wav_header_info::nchans)
        .def_readwrite("bytes_per_sample", &wav_header_info::bytes_per_sample)
        .def_readwrite("first_sample_pos", &wav_header_info::first_sample_pos)
        .def_readwrite("samples_per_chan", &wav_header_info::samples_per_chan)
        .def_readwrite("data_chunk_size", &wav_header_info::data_chunk_size);

    m.def("wavheader_parse",
          &::gr::blocks::wavheader_parse,
          py::arg("fp"),
          py::arg("info"),
          D(wavheader_parse));

    m.def("wav_read_sample",
          &::gr::blocks::wav_read_sample,
          py::arg("fp"),
          py::arg("bytes_per_sample"),
          D(wav_read_sample));


    m.def("wavheader_write",
          &::gr::blocks::wavheader_write,
          py::arg("fp"),
          py::arg("sample_rate"),
          py::arg("nchans"),
          py::arg("bytes_per_sample"),
          D(wavheader_write));


    m.def("wav_write_sample",
          &::gr::blocks::wav_write_sample,
          py::arg("fp"),
          py::arg("sample"),
          py::arg("bytes_per_sample"),
          D(wav_write_sample));


    m.def("wavheader_complete",
          &::gr::blocks::wavheader_complete,
          py::arg("fp"),
          py::arg("byte_count"),
          D(wavheader_complete));
}
