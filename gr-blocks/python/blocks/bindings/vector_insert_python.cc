/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(vector_insert.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(3a72517895e75d2a08cc780a1da59acf)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/blocks/vector_insert.h>

template <typename T>
void bind_vector_insert_template(py::module& m, const char* classname)
{
    using vector_insert = gr::blocks::vector_insert<T>;

    py::class_<vector_insert, gr::block, gr::basic_block, std::shared_ptr<vector_insert>>(
        m, classname)
        .def(py::init(&gr::blocks::vector_insert<T>::make),
             py::arg("data"),
             py::arg("periodicity"),
             py::arg("offset") = 0)
        .def("rewind", &vector_insert::rewind)
        .def("set_data", &vector_insert::set_data, py::arg("set_data"));
}

void bind_vector_insert(py::module& m)
{
    bind_vector_insert_template<std::uint8_t>(m, "vector_insert_b");
    bind_vector_insert_template<std::int16_t>(m, "vector_insert_s");
    bind_vector_insert_template<std::int32_t>(m, "vector_insert_i");
    bind_vector_insert_template<float>(m, "vector_insert_f");
    bind_vector_insert_template<gr_complex>(m, "vector_insert_c");
}
