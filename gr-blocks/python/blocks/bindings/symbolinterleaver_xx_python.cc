/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(symbolinterleaver_xx.h)                                    */
/* BINDTOOL_HEADER_FILE_HASH(9038706f457ceba213305d47b60adaf4)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/blocks/symbolinterleaver_xx.h>

template <typename T>
void bind_symbolinterleaver_template(py::module& m, const char* classname)
{
    using symbolinterleaver = gr::blocks::symbolinterleaver_xx<T>;

    py::class_<symbolinterleaver,
               gr::sync_block,
               gr::block,
               gr::basic_block,
               std::shared_ptr<symbolinterleaver>>(m, classname)
        .def(py::init(&gr::blocks::symbolinterleaver_xx<T>::make),
             py::arg("interleaver_indices"),
             py::arg("is_packed"),
             py::arg("interleaver_mode"))
        .def("interleaver_indices", &symbolinterleaver::interleaver_indices)
        .def("deinterleaver_indices", &symbolinterleaver::deinterleaver_indices)
        .def("is_packed", &symbolinterleaver::is_packed)
        .def("interleaver_mode", &symbolinterleaver::interleaver_mode);
}

void bind_symbolinterleaver_xx(py::module& m)
{
    bind_symbolinterleaver_template<uint8_t>(m, "symbolinterleaver_bb");
    bind_symbolinterleaver_template<float>(m, "symbolinterleaver_ff");
}
