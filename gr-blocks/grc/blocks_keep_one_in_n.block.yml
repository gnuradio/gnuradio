id: blocks_keep_one_in_n
label: Keep 1 in N
flags: [ python, cpp ]

parameters:
-   id: type
    label: Type
    dtype: enum
    options: [complex, float, int, short, byte]
    option_attributes:
        size: [gr.sizeof_gr_complex, gr.sizeof_float, gr.sizeof_int, gr.sizeof_short,
            gr.sizeof_char]
    hide: part
-   id: n
    label: N
    dtype: int
    default: '1'
    hide: ${ 'part' if vlen == 1 else 'none' }
-   id: vlen
    label: Vector Length
    dtype: int
    default: '1'
    hide: ${ 'part' if vlen == 1 else 'none' }

inputs:
-   domain: stream
    dtype: ${ type }
    vlen: ${ vlen }

outputs:
-   domain: stream
    dtype: ${ type }
    vlen: ${ vlen }

asserts:
- ${ n > 0 }
- ${ vlen > 0 }

templates:
    imports: from gnuradio import blocks
    make: blocks.keep_one_in_n(${type.size}*${vlen}, ${n})
    callbacks:
    - set_n(${n})

cpp_templates:
    includes: ['#include <gnuradio/blocks/keep_one_in_n.h>']
    declarations: 'blocks::keep_one_in_n::sptr ${id};'
    make: 'this->${id} = blocks::keep_one_in_n::make(${type.size}*${vlen}, ${n});'
    callbacks:
    - set_n(${n})

file_format: 1
