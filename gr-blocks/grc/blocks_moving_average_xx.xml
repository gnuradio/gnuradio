<?xml version="1.0"?>
<!--
###################################################
##Moving Average
###################################################
 -->
<block>
	<name>Moving Average</name>
	<key>blocks_moving_average_xx</key>
	<import>from gnuradio import blocks</import>
	<make>blocks.moving_average_$(type.fcn)($length, $scale, $max_iter, $vlen)</make>
	<callback>set_length_and_scale($length, $scale)</callback>
	<param>
		<name>Type</name>
		<key>type</key>
		<type>enum</type>
		<option>
			<name>Complex</name>
			<key>complex</key>
			<opt>fcn:cc</opt>
			<opt>scale:complex</opt>
		</option>
		<option>
			<name>Float</name>
			<key>float</key>
			<opt>fcn:ff</opt>
			<opt>scale:real</opt>
		</option>
		<option>
			<name>Int</name>
			<key>int</key>
			<opt>fcn:ii</opt>
			<opt>scale:int</opt>
		</option>
		<option>
			<name>Short</name>
			<key>short</key>
			<opt>fcn:ss</opt>
			<opt>scale:int</opt>
		</option>
	</param>
	<param>
		<name>Length</name>
		<key>length</key>
		<value>1000</value>
		<type>int</type>
	</param>
	<param>
		<name>Scale</name>
		<key>scale</key>
		<value>1</value>
		<type>$type.scale</type>
	</param>
	<param>
		<name>Max Iter</name>
		<key>max_iter</key>
		<value>4000</value>
		<type>int</type>
	</param>
	<param>
		<name>Length of Vectors</name>
		<key>vlen</key>
		<value>1</value>
		<type>int</type>
	</param>
	<check>$vlen &gt; 0</check>
	<sink>
		<name>in</name>
		<type>$type</type>
		<vlen>$vlen</vlen>
	</sink>
	<source>
		<name>out</name>
		<type>$type</type>
		<vlen>$vlen</vlen>
	</source>
	<doc>
Computes a moving average of the input:
Output[i] = scale * sum(input[i-length: i])

In its default parameters, the block actually computes a moving sum.

Length:
The size of the moving average window to used.

Scale:
Factor to scale the sum of the last (Length) samples.
To get an actual moving average, the scale should then be set to 1/Length.

Max Iter:
The maximum number of samples the block will treat in one call of its work function.

vlen:
Used if the input samples are vectors and correspond to the length of those vectors.
When operating on vectors, the average is done using only the numbers from the same vector index
Output[i][vector_index] = scale * sum(Input[i-length: i][vector_index])


Implementation file:
gr-blocks/lib/moving_average_XX_impl.cc.t
GRC file:
gr-blocks/grc/blocks_moving_average_xx.xml
	</doc>
</block>
