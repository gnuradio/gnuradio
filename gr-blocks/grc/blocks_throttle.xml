<?xml version="1.0"?>
<!--
###################################################
##Throttle
###################################################
 -->
<block>
	<name>Throttle</name>
	<key>blocks_throttle</key>
	<flags>throttle</flags>
	<import>from gnuradio import blocks</import>
	<make>blocks.throttle($type.size*$vlen, $samples_per_second,$ignoretag)</make>
        <callback>set_sample_rate($samples_per_second)</callback>
	<param>
		<name>Type</name>
		<key>type</key>
		<type>enum</type>
		<option>
			<name>Complex</name>
			<key>complex</key>
			<opt>size:gr.sizeof_gr_complex</opt>
		</option>
		<option>
			<name>Float</name>
			<key>float</key>
			<opt>size:gr.sizeof_float</opt>
		</option>
		<option>
			<name>Int</name>
			<key>int</key>
			<opt>size:gr.sizeof_int</opt>
		</option>
		<option>
			<name>Short</name>
			<key>short</key>
			<opt>size:gr.sizeof_short</opt>
		</option>
		<option>
			<name>Byte</name>
			<key>byte</key>
			<opt>size:gr.sizeof_char</opt>
		</option>
	</param>
	<param>
		<name>Sample Rate</name>
		<key>samples_per_second</key>
		<value>samp_rate</value>
		<type>real</type>
	</param>
	<param>
		<name>Vec Length</name>
		<key>vlen</key>
		<value>1</value>
		<type>int</type>
	</param>
    <param>
        <name>Ignore rx_rate tag</name>
        <key>ignoretag</key>
        <value>True</value>
        <type>bool</type>
        <hide>#if str($ignoretag()) == 'True' then 'part' else 'none'#</hide>
    </param>
	<check>$vlen &gt; 0</check>
	<sink>
		<name>in</name>
		<type>$type</type>
		<vlen>$vlen</vlen>
	</sink>
	<source>
		<name>out</name>
		<type>$type</type>
		<vlen>$vlen</vlen>
	</source>
	<doc>
Limits the average sample rate to a maximum rate.

Sample Rate:
Maximum average sample rate wanted.

Ignore rx_rate tag:
If set to False, the block will set its sample rate to the value of recieved tags with the key rx_rate. It will ignore other tags.

vlen:
vlen (for Vector length) is useful if the input samples are vectors and it corresponds to the length of that vector.

The sample_rate() and get_sample_rate() functions are available to interact with the sample rate parameter dynamically. (but not the other parameters)
A Controlport interface is also available to get and set the sample rate value.

Implementation file:
gr-blocks/lib/throttle_impl.cc
GRC file:
gr-blocks/grc/blocks_throttle.xml
	</doc>
</block>
