/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(squelch_base_cc.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(a9c95bd15eb924264c2ecab3b5e02963)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/analog/squelch_base_cc.h>
// pydoc.h is automatically generated in the build directory
#include <squelch_base_cc_pydoc.h>

void bind_squelch_base_cc(py::module& m)
{

    using squelch_base_cc = ::gr::analog::squelch_base_cc;


    py::class_<squelch_base_cc,
               gr::block,
               gr::basic_block,
               std::shared_ptr<squelch_base_cc>>(m, "squelch_base_cc", D(squelch_base_cc))

        // .def(py::init<>(),D(squelch_base_cc,squelch_base_cc,0))
        // .def(py::init<gr::analog::squelch_base_cc const &>(), py::arg("arg0"),
        //    D(squelch_base_cc,squelch_base_cc,1)
        // )


        .def("ramp", &squelch_base_cc::ramp, D(squelch_base_cc, ramp))


        .def("set_ramp",
             &squelch_base_cc::set_ramp,
             py::arg("ramp"),
             D(squelch_base_cc, set_ramp))


        .def("gate", &squelch_base_cc::gate, D(squelch_base_cc, gate))


        .def("set_gate",
             &squelch_base_cc::set_gate,
             py::arg("gate"),
             D(squelch_base_cc, set_gate))


        .def("unmuted", &squelch_base_cc::unmuted, D(squelch_base_cc, unmuted))


        .def("squelch_range",
             &squelch_base_cc::squelch_range,
             D(squelch_base_cc, squelch_range))

        ;
}
