/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(pll_carriertracking_cc.h) */
/* BINDTOOL_HEADER_FILE_HASH(f4dafcd23441b5ab55907d9df723cd86)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/analog/pll_carriertracking_cc.h>
// pydoc.h is automatically generated in the build directory
#include <pll_carriertracking_cc_pydoc.h>

void bind_pll_carriertracking_cc(py::module& m)
{

    using pll_carriertracking_cc = ::gr::analog::pll_carriertracking_cc;


    py::class_<pll_carriertracking_cc,
               gr::blocks::control_loop,
               gr::sync_block,
               gr::block,
               gr::basic_block,
               std::shared_ptr<pll_carriertracking_cc>>(
        m, "pll_carriertracking_cc", D(pll_carriertracking_cc))

        .def(py::init(&pll_carriertracking_cc::make),
             py::arg("loop_bw"),
             py::arg("max_freq"),
             py::arg("min_freq"),
             D(pll_carriertracking_cc, make))


        .def("lock_detector",
             &pll_carriertracking_cc::lock_detector,
             D(pll_carriertracking_cc, lock_detector))


        .def("squelch_enable",
             &pll_carriertracking_cc::squelch_enable,
             py::arg("arg0"),
             D(pll_carriertracking_cc, squelch_enable))


        .def("set_lock_threshold",
             &pll_carriertracking_cc::set_lock_threshold,
             py::arg("arg0"),
             D(pll_carriertracking_cc, set_lock_threshold))


        ;
}
