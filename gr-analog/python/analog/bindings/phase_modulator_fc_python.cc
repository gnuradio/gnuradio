/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(phase_modulator_fc.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(3a3d52817f6d58610adb269a053e8fa8)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/analog/phase_modulator_fc.h>
// pydoc.h is automatically generated in the build directory
#include <phase_modulator_fc_pydoc.h>

void bind_phase_modulator_fc(py::module& m)
{

    using phase_modulator_fc = ::gr::analog::phase_modulator_fc;


    py::class_<phase_modulator_fc,
               gr::sync_block,
               gr::block,
               gr::basic_block,
               std::shared_ptr<phase_modulator_fc>>(
        m, "phase_modulator_fc", D(phase_modulator_fc))

        .def(py::init(&phase_modulator_fc::make),
             py::arg("sensitivity"),
             D(phase_modulator_fc, make))


        .def("sensitivity",
             &phase_modulator_fc::sensitivity,
             D(phase_modulator_fc, sensitivity))


        .def("phase", &phase_modulator_fc::phase, D(phase_modulator_fc, phase))


        .def("set_sensitivity",
             &phase_modulator_fc::set_sensitivity,
             py::arg("s"),
             D(phase_modulator_fc, set_sensitivity))


        .def("set_phase",
             &phase_modulator_fc::set_phase,
             py::arg("p"),
             D(phase_modulator_fc, set_phase))

        ;
}
