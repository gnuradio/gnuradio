/*
 * Copyright 2020 Free Software Foundation, Inc.
 * Copyright 2022 Marcus MÃ¼ller
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(fastnoise_source.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(716bd3e691b8b3dc215d05b0d4f6835d)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/analog/fastnoise_source.h>

template <typename T>
void bind_fastnoise_source_template(py::module& m, const char* classname)
{
    using fastnoise_source = gr::analog::fastnoise_source<T>;

    py::class_<fastnoise_source,
               gr::sync_block,
               gr::block,
               gr::basic_block,
               std::shared_ptr<fastnoise_source>>(m, classname)

        /* while we do want to have an uint64_t seed API in C++, Pybind will not allow us
         * to pass in negative ints that way. If we instead settle on a wrapper that's
         * int64_t, we only get positive ints up to 2**63-1. To get up to 2**64-1, we need
         * to also explicitly declare an uint64_t wrapper, and forbid automatic type
         * conversion.
         */
        .def(py::init([](gr::analog::noise_type_t type,
                         float ampl,
                         uint64_t seed,
                         size_t samples) {
                 return gr::analog::fastnoise_source<T>::make(type, ampl, seed, samples);
             }),
             py::arg("type"),
             py::arg("ampl"),
             py::arg("seed").noconvert(true) = 0,
             py::arg("samples") = 1024 * 16)
        .def(py::init([](gr::analog::noise_type_t type,
                         float ampl,
                         int64_t seed,
                         size_t samples) {
                 return gr::analog::fastnoise_source<T>::make(type, ampl, seed, samples);
             }),
             py::arg("type"),
             py::arg("ampl"),
             py::arg("seed").noconvert(true) = 0,
             py::arg("samples") = 1024 * 16)

        .def("sample", &fastnoise_source::sample)
        .def("sample_unbiased", &fastnoise_source::sample_unbiased)
        .def("samples", &fastnoise_source::samples)

        .def("set_type", &fastnoise_source::set_type, py::arg("type"))
        .def("set_amplitude", &fastnoise_source::set_amplitude, py::arg("amplitude"))
        .def("type", &fastnoise_source::type)
        .def("amplitude", &fastnoise_source::amplitude);
}

void bind_fastnoise_source(py::module& m)
{
    bind_fastnoise_source_template<std::int16_t>(m, "fastnoise_source_s");
    bind_fastnoise_source_template<std::int32_t>(m, "fastnoise_source_i");
    bind_fastnoise_source_template<float>(m, "fastnoise_source_f");
    bind_fastnoise_source_template<gr_complex>(m, "fastnoise_source_c");
}
