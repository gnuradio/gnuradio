name: 'Windows GTK Builder'
on:
  workflow_dispatch:


jobs:
  ## duplicate from make-test.yml
  # Check hashes first
  check-hashes:
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    name: Check hashes
    container:
      image: 'gnuradio/ci:fedora-42-3.10'
    steps:
    - name: Checkout project
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - name: Add git repo to safe repos
      run: git config --global --add safe.directory ${GITHUB_WORKSPACE}
    - name: Run hash fixer on all binding files
      run: gr-utils/bindtool/scripts/binding-hash-hotfixer.zsh gr-*/python/*/bindings/*.cc gnuradio-runtime/python/gnuradio/gr/bindings/*.cc
    - name: get changed files
      run: >
          git --no-pager diff -z --name-only --
          > /tmp/hashdiff
          ; [[ ! -s /tmp/hashdiff ]] && exit 0
          ; sed -z 's;.*;::error file=&::Hash mismatch in &\n;' /tmp/hashdiff
          | tr -d '\0'
          ; exit -1

  # We continue checking C++ formatting. No one gets free CPU cycles if they
  # can't use clang-format.
  check-formatting:
    name: Check C++ Formatting
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v2
    - uses: DoozyX/clang-format-lint-action@v0.14
      with:
        source: '.'
        extensions: 'h,hpp,cpp,cc,cc.in'
        clangFormatVersion: 14
  check-python-formatting:
    name: Check Python Formatting
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v2
    - uses: quentinguidee/pep8-action@v1
      with:
        # -----------------------------------
        # UPDATE tox.ini when making changes!
        arguments: '--max-line-length=120 --ignore E265,E266,E275,E402,E501,E704,E712,E713,E714,E711,E721,E722,E741,W504,W605 --exclude *.yml.py'
        # -----------------------------------
  ## end duplication
  build-windows:
    # All of these shall depend on the formatting check (needs: check-formatting)
    needs: [check-hashes, check-formatting, check-python-formatting]
    runs-on: windows-latest
    name: Windows GTK build (gvsbuild with msbuild)
    defaults:
      run:
        shell: cmd
    steps:
    - name: Check environment
      run: |
        set
        @echo Relying on preinstalled tools in known installation locations
        @echo MSYS2 via GHCUP_MSYS2 environment variable
        set GHCUP_MSYS2
        @echo PIPX via PATH environment variable
        set PIPX_HOME
        pipx list
        @echo MSVC via PATH environment variable
        "%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64
        @echo Chocolatey via PATH environment variable
        set ChocolateyInstall
        choco list
        @echo Python 3.9 via RUNNER_TOOL_CACHE at %RUNNER_TOOL_CACHE%
        dir %RUNNER_TOOL_CACHE%\Python
    - name: Export vcvars64 path for 'x64 Native Tools Command Prompt'
      if: always()
      run: |
        set
        where msbuild
        #set msbuild_vcvars64=C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat
        set msbuild_vcvars64=C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat
        if NOT EXIST "%msbuild_vcvars64%" (^
           echo ERROR: Could not locate 'vcvars64' batch file at "%msbuild_vcvars64%". This script is intended to be run from a build machine & exit /B 1)
        echo msbuild_vcvars64=%msbuild_vcvars64%>> %GITHUB_ENV%
        call "%msbuild_vcvars64%"
        set VSINSTALLDIR
        call set _VSINSTALLDIR=%%VSINSTALLDIR:~0,-1%%
        set _VSINSTALLDIR
        call set __VSINSTALLDIR=%%VSINSTALLDIR:~-1%%
        set __VSINSTALLDIR
        @rem This work - if "%__VSINSTALLDIR%" == "\" (set VSINSTALLDIR="%_VSINSTALLDIR%")
        if "%__VSINSTALLDIR%" == "\" set VSINSTALLDIR=%_VSINSTALLDIR%
        set VSINSTALLDIR
        echo VSINSTALLDIR1=%VSINSTALLDIR%>> %GITHUB_ENV%
        echo for /f "usebackq tokens=*" %%i in (`"C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -version "[17.0, 18.0)" -requires Microsoft.VisualStudio.Workload.VCTools -property installationPath -products *`)
        call "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -requires Microsoft.VisualStudio.Workload.VCTools -property installationPath -products *
        for /f "usebackq tokens=*" %%i in (`call "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -requires Microsoft.VisualStudio.Workload.VCTools -property installationPath -products *`) do (set test=%%i)
        echo '%test%'
        dir c:
        dir d:
        "%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" ^
            -NoProfile -InputFormat None -ExecutionPolicy Bypass ^
            -Command "Get-CimInstance Win32_PageFileUsage | fl *"
        "%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" ^
            -NoProfile -InputFormat None -ExecutionPolicy Bypass ^
            -Command "Get-ComputerInfo | Select-Object TotalPhysicalMemory, AvailablePhysicalMemory"
        wmic OS
#    - name: configure Pagefile
#      uses: al-cheb/configure-pagefile-action@v1.2
#      with:
#        minimum-size: 16GB
#        maximum-size: 64GB
#        disk-root: "D:"
#    - name: check Pagefile
#      run: |
#        dir d:
#        "%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" ^
#            -NoProfile -InputFormat None -ExecutionPolicy Bypass ^
#            -Command "Get-CimInstance Win32_PageFileUsage | fl *"
#        "%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" ^
#            -NoProfile -InputFormat None -ExecutionPolicy Bypass ^
#            -Command "Get-ComputerInfo | Select-Object TotalPhysicalMemory, AvailablePhysicalMemory"
    - name: Setup Python 3.12
      if: always()
      uses: actions/setup-python@v5
      # action installs into RUNNER_TOOL_CACHE and
      # defines and exports the environment variables pythonLocation, Python_ROOT_DIR, Python2_ROOT_DIR, Python3_ROOT_DIR
      id: cp312
      with:
        python-version: '3.12'
    - run: |
        set
    #- name: Create Python Virtual Environment
    #  env:
    #    PY_VENV_PATH: ${{ runner.workspace }}\py_venv
    #  run: | 
    #    echo '${{ steps.cp312.outputs.python-version }}'
    #    ${{ steps.cp312.outputs.python-path }} -m pip install virtualenv
    #    ${{ steps.cp312.outputs.python-path }} -m venv %PY_VENV_PATH%
    #    call %PY_VENV_PATH%\Scripts\activate
    #    set pythonLocation=%PY_VENV_PATH%&& set Python_ROOT_DIR=%PY_VENV_PATH%&& set ^
    #        Python2_ROOT_DIR=%PY_VENV_PATH%&& set Python3_ROOT_DIR=%PY_VENV_PATH%
    #    python -c "import sys;print(sys.path)"
    #    echo PY_VENV_PATH=%PY_VENV_PATH%>> %GITHUB_ENV%
    #    @rem echo PATH=%PATH%>> %GITHUB_ENV%
    #    set RUNNER_WORKSPACE
    #    set GITHUB_WORKSPACE
    #    pip install -r %GITHUB_WORKSPACE%\gnuradio\release\requirements.txt
    # Need to check if GHCUP_MSYS2 can be used
    #- uses: msys2/setup-msys2@v2
    #  id: msys2
    #  with:
    #    update: true
    #    MSYSTEM: ucrt64
    #- name: Export environment variable MSYS2_LOCATION
    #  env:
    #    MSYS2_LOCATION: ${{ steps.msys2.outputs.msys2-location }}
    #  run: |
    #    set MSYS2_LOCATION
    #    set MSYSTEM
    #    echo MSYSTEM=%MSYSTEM%>> %GITHUB_ENV%
    #    echo MSYS2_LOCATION=%MSYS2_LOCATION%>> %GITHUB_ENV%
#    - name: Clone GVSBuild (to build GTK)
#      uses: actions/checkout@v4
#      with:
#        repository: 'wingtk/gvsbuild'
#        ref: '09028ca09c3f7eef4d7fe935f79cacd2fbb4410f'
#        path: gvsbuild
#        fetch-depth: 2
#      run: |
#        echo %CD%
#        @rem CD is D:\a\gnuradio\gnuradio
#        set MSYSTEM
#        set MSYS2_LOCATION
#        set Python3_ROOT_DIR
#        set 
#        dir %RUNNER_WORKSPACE%
#        dir
#        cd gvsbuild
#        echo %CD% -- Calling git
#        git checkout HEAD
#        git status
#        echo %CD% -- Done Calling git
    - name: Build GTK binaries with gvsbuild
      env:
        gtk_version: gtk3
        gtk_build_dir: ${{ runner.workspace }}\gtk-build
        gvsbuild_dir: ${{ github.workspace }}\gvsbuild
      run: |
        @rem @echo Activate Python venv
        @rem call %PY_VENV_PATH%\Scripts\activate
        @rem set pythonLocation=%PY_VENV_PATH%&& set Python_ROOT_DIR=%PY_VENV_PATH%&& set ^
        @rem     Python2_ROOT_DIR=%PY_VENV_PATH%&& set Python3_ROOT_DIR=%PY_VENV_PATH%
        @rem python -c "import sys;print(sys.path)"
        @echo Define MSYS2_LOCATION with linux path separators
        call set fps_MSYS2_DIR=%%GHCUP_MSYS2:\=/%%
        set fps_MSYS2_DIR
        set MSYSTEM=UCRT64
        @echo Defining a number of environment variables pointing to future locations
        mkdir %gtk_build_dir%
        echo GTK_BUILD_PAYH=%gtk_build_dir%>> %GITHUB_ENV%
        set GTK_ROOT=%gtk_build_dir%\gtk\x64\release
        @rem set INCLUDE=%GTK_ROOT%\include;%GTK_ROOT%\include\cairo;%GTK_ROOT%\include\glib-2.0;%GTK_ROOT%\include\gobject-introspection-1.0;%GTK_ROOT%\lib\glib-2.0\include;%INCLUDE%
        @rem set LIB=%GTK_ROOT%\lib;%LIB%
        set GTK_BIN_DIR=%GTK_ROOT%\bin
        call set fps_GTK_BIN_DIR=%%GTK_BIN_DIR:\=/%%
        echo fps_GTK_BIN_DIR=%fps_GTK_BIN_DIR%>> %GITHUB_ENV%
        set PATH=%GTK_BIN_DIR%;%PATH%
        set
        @echo Starting to build from %gvsbuild_dir%
        @rem Defer calling vcvars64.bat as it is called by gvsbuild itself and 
        @rem multiple calls can lead to 'The input line is too long.' errors 
        @rem when PATH environment variable is repeatably expanded.
        @rem call "%msbuild_vcvars64%" -clean_env
        @rem cd %gvsbuild_dir%
        @rem pip install .
        @rem python -m pip install pipx
        @rem python -m pipx ensurepath
        @rem pipx list
        @rem pipx install gvsbuild
        python -m pip install gvsbuild
        @echo TODO specify --vs-ver 17 instead of --vs-ver 16, because gvsbuild assumes --vs-ver 16 is mapped to MSVC 2019 folder
        @echo TODO does not seem to understand the MSVC 2022 can optionally compile with older --vs_ver
        @rem set gvsbuild_args=build %gtk_version% --configuration release --py-wheel --enable-gi --msys-dir %fps_MSYS2_DIR% --build-dir %gtk_build_dir%  --from-scratch --ninja-opts -j1 --vs-ver 17 --platform x64 --vs-install-path "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools"
        set
        set gvsbuild_args=build %gtk_version% --configuration release --py-wheel --enable-gi --msys-dir %fps_MSYS2_DIR% --build-dir %gtk_build_dir% --msbuild-opts /property:RunCodeAnalysis=false --ninja-opts -j1 --vs-ver 17 --platform x64
        @echo Calling gvsbuild with arguments '%gvsbuild_args%'
        gvsbuild %gvsbuild_args% --log-single --capture-out
        type %gtk_build_dir%\logs\gvsbuild-log.txt
        type %gtk_build_dir%\build\gtk\x64\release\stack.propsstack.props
        type %gtk_build_dir%\build\gtk\x64\release\gtk3\_gvsbuild-meson\meson-logs\meson-log.txt
        dir c:
        dir d:
        "%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" ^
            -NoProfile -InputFormat None -ExecutionPolicy Bypass ^
            -Command "Get-CimInstance Win32_PageFileUsage | fl *"
        @echo Install pygi
        dir %gtk_build_dir%
        dir %GTK_ROOT%\python
        for %%i in (%GTK_ROOT%\python\PyGObject*.whl) do (pip install --force-reinstall %%i)
        for %%i in (%GTK_ROOT%\python\pycairo*.whl) do (pip install --force-reinstall %%i)
        @echo Verify pygi installation
        python -c "import os;os.add_dll_directory('%fps_GTK_BIN_DIR%');import gi;gi.require_version('Gtk', '3.0');gi.require_foreign('cairo', 'Context');gi.require_version('PangoCairo', '1.0')"
    - name: Bundle installed files
      if: success() || failure()
      run: |
        mkdir installation-archive.squash
        cd installation-archive.squash
        @rem mkdir %RUNNER_WORKSPACE%\cmake-backup
        @rem robocopy /NJH /NFL /NDL /MT /W:5 /R:4 "%GITHUB_WORKSPACE%\gnuradio\build" "%RUNNER_WORKSPACE%\cmake-backup"
        @rem tar -czf cmake-backup.gzip -C "%RUNNER_WORKSPACE%\cmake-backup" .
        dir %GTK_BUILD_PAYH%
        tar -czf gvsbuild-backup.gzip -C "%GTK_BUILD_PAYH%" .
        @rem robocopy /NJH /NDL /MT /W:5 /R:4 "%GITHUB_WORKSPACE%\gnuradio\build\_CPack_Packages\win64\NSIS" .
        @rem tar -czf gnuradio.gzip -C "%PROGRAMFILES%\GNU Radio" .
        @rem set GR_INSTALL_DIR
        dir
    - name: Upload build artifact archive
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: build artifact archive'
        # already much better compressed
        compression-level: 0
        path:  ${{ github.workspace }}/installation-archive.squash
        if-no-files-found: warn
        # these things are kinda large, keep them around for 7 days: we can recreate them if we want
        retention-days: 7

