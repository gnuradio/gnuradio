name: 'Make Test'
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  # We start with checking C++ formatting. No one gets free CPU cycles if they
  # can't use clang-format.
  check-formatting:
    name: Check C++ Formatting
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v3
    - uses: DoozyX/clang-format-lint-action@v0.14
      with:
        source: '.'
        exclude: './volk'
        extensions: 'h,hpp,cpp,cc,cc.in'
        clangFormatVersion: 14
  check-python-formatting:
    name: Check Python Formatting
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v3
    - uses: quentinguidee/pep8-action@v1
      with:
        arguments: '--max-line-length=120 --ignore E265,E266,E275,E402,E501,E704,E712,E713,E714,E711,E722,E741,W504,W605 --exclude *.yml.py'
  # Doxygen gets built separately. It has a lot of output and its own weirdness.
  doxygen:
    name: Doxygen
    runs-on: ubuntu-latest # This can run on whatever
    timeout-minutes: 15
    container:
      image: 'gnuradio/ci:ubuntu-20.04-3.9'
      volumes:
        - build_data:/build
    steps:
    - uses: actions/checkout@v3
      name: Checkout Project
    - name: CMake
      run: 'cd /build && cmake ${GITHUB_WORKSPACE}'
    - name: Make Docs
      run: 'cd /build && make doxygen_target'
  linux-docker:
  # All of these shall depend on the formatting check (needs: check-formatting)
    needs: [check-formatting, check-python-formatting]
    runs-on: ubuntu-latest
    # The GH default is 360 minutes (it's also the max as of Feb-2021). However
    # we should fail sooner. The only reason to exceed this time is if a test
    # hangs.
    timeout-minutes: 120
    strategy:
      # Enabling fail-fast would kill all Dockers if one of them fails. We want
      # maximum output.
      fail-fast: false
      matrix:
        # For every distro we want to test here, add one key 'distro' with a
        # descriptive name, and one key 'containerid' with the name of the
        # container (i.e., what you want to docker-pull)
        include:
          - distro: 'Ubuntu 20.04'
            containerid: 'gnuradio/ci:ubuntu-20.04-3.9'
            cxxflags: -Werror
            ctest_args: '-E ""'
            ldpath:
          - distro: 'Ubuntu 22.04'
            containerid: 'gnuradio/ci:ubuntu-22.04-3.9'
            cxxflags: -Werror
            ctest_args: '-E "qa_polar_..coder_(sc_)?systematic"'
            ldpath:
          - distro: 'Fedora 37 (with 0xFE memory initialization)'
            containerid: 'gnuradio/ci:fedora-37-3.9'
            cxxflags: -Werror -ftrivial-auto-var-init=pattern
            ctest_args: '-E ""'
            ldpath: /tmp/prefix/lib64/
          - distro: 'Fedora 38 (clang)'
            containerid: 'gnuradio/ci:fedora-38-3.10'
            cxxflags: -Werror
            cmakeflags: -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang
            ctest_args: '-E ""'
            ldpath: /tmp/prefix/lib64/
          # - distro: 'CentOS 8.4'
          #   containerid: 'gnuradio/ci:centos-8.4-3.10'
          #   cxxflags: ''
          #   ctest_args: '-E ""'
          #   ldpath: /usr/local/lib64/
          - distro: 'Debian 11'
            containerid: 'gnuradio/ci:debian-11-3.10'
            cxxflags: -Werror
            ctest_args: '-E "qa_polar_..coder_(sc_)?systematic"'
            ldpath:
          - distro: 'Debian 11 (32-bit)'
            containerid: 'gnuradio/ci:debian-i386-11-3.10'
            containeroptions: '--platform linux/i386'
            cxxflags: -Werror
            ctest_args: '-E "qa_polar_..coder_(sc_)?systematic"'
            ldpath:
    name: ${{ matrix.distro }}
    container:
      image: ${{ matrix.containerid }}
      volumes:
        - build_data:/build
      options: --cpus 2 ${{ matrix.containeroptions }}
    steps:
    - uses: actions/checkout@v1
      name: Checkout Project
    - name: CMake
      env:
        CXXFLAGS: ${{ matrix.cxxflags }}
      run: |
        cd /build && \
        cmake ${{ matrix.cmakeflags }} \
        -DCMAKE_INSTALL_PREFIX=/tmp/prefix \
        -DENABLE_DOXYGEN=OFF \
        -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
        ${GITHUB_WORKSPACE} 
    - name: Upload Compile Commands
      if: ${{ ! contains(matrix.distro, '32-bit') }}
      uses: actions/upload-artifact@v3
      with:
        name: compile_commands.json-${{matrix.distro}}
        path: /build/compile_commands.json
    - name: Make
      run: 'cd /build && make -j2 -k'
    - name: Make Test
      env:
        DISTRO: ${{matrix.distro}}
        QT_QPA_PLATFORM: offscreen
      run: |
        printf '### Test Summary\n' >> "${GITHUB_STEP_SUMMARY}"
        printf '::group::ctest\n'
        cd /build && \
        ctest --output-on-failure ${{ matrix.ctest_args }}&& \
        printf '::endgroup::' && \
        printf 'Success. :rocket:\n' >> "${GITHUB_STEP_SUMMARY}" && \
        exit 0
        printf '::endgroup::'
        printf '::group::List failed tests\n'
        ctest --rerun-failed --show-only ${{ matrix.ctest_args }} -O /tmp/failed.log
        nfailed=$(sed -n 's/^Total Tests: \([[:digit:]]*\)/\1/p' /tmp/failed.log)
        printf '::error title=%s Test Failures::%d Failed tests\n' "${DISTRO}" "${nfailed}"
        printf '%d Failed tests:\n\n' nfailed >> "${GITHUB_STEP_SUMMARY}"
        sed -n 's/^[[:space:]]*Test  #\([[:digit:]]*\): \(.*\)$/- \1: `\2`/p' /tmp/failed.log >> "${GITHUB_STEP_SUMMARY}"
        printf '::endgroup::'
        exit -1
    - id: make_instal
      name: Make Install
      run: |
       cd /build && \
       mkdir -p /tmp/prefix && \
       make install && \
       ( printf 'PYTHONPATH='
         for dir in /tmp/prefix/lib*/python*/*-packages ; do
           printf "$dir:" ;
         done
         printf '%s\n' "${PYTHONPATH}" ) | sed 's/:$//' >> "${GITHUB_ENV}"
       ( printf 'LD_LIBRARY_PATH='
         for dir in  /tmp/prefix/lib* ; do
           printf "$dir:" ;
         done
         printf '%s\n' "${LD_LIBRARY_PATH}" ) | sed 's/:$//' >> "${GITHUB_ENV}"
       su -c "echo ${{matrix.ldpath}} >> /etc/ld.so.conf"
       su -c ldconfig
    - name: Generate Installation Artifact
      if: ${{ ! contains(matrix.distro, '32-bit') }}
      env:
        DISTRO: ${{matrix.distro}}
      run: |
        cd /tmp/prefix 
        export ARCHIVE="${GITHUB_WORKSPACE}/install.tar.xz"
        tar cf - * | xz -2 -T 2 > "${ARCHIVE}"
        printf 'Installation Artifact %s:\n "%s" Size %sB\n' "${DISTRO}" "${ARCHIVE}" $(du -BM "${ARCHIVE}")
    - name: Upload Installation Artifact
      if: ${{ ! contains(matrix.distro, '32-bit') }}
      uses: actions/upload-artifact@v3
      with:
        name: installation-${{matrix.distro}}
        path: |
          ${{github.workspace}}/install.tar.xz
          /build/install_manifest.txt
          /build/compile_commands.json
    - name: Test Python3
      env:
        DISTRO: ${{matrix.distro}}
      run: |
        printf 'PYTHONPATH %s:\n%s\n' "${DISTRO}" "${PYTHONPATH}"
        python3 -c "import gnuradio.blocks as bs; print(bs.complex_to_float()); print(f'Python found GNU Radio version {bs.gr.version()}')"
  no-python:
  # All of these shall depend on the formatting check (needs: check-formatting)
    needs: [check-formatting, check-python-formatting]
    runs-on: ubuntu-latest
    # The GH default is 360 minutes (it's also the max as of Feb-2021). However
    # we should fail sooner. The only reason to exceed this time is if a test
    # hangs.
    timeout-minutes: 120
    name: C++ Only Build (Fedora 38)
    container:
      image: 'gnuradio/ci:fedora-38-3.10'
      volumes:
        - build_data:/build
      options: --cpus 2
    steps:
    - uses: actions/checkout@v3
      name: Checkout Project
    - name: CMake
      env:
        CXXFLAGS: -Werror
      run: |
        cd /build && \
        cmake ${GITHUB_WORKSPACE} \
        -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
        -DENABLE_DOXYGEN=OFF \
        -DENABLE_PYTHON=OFF \
        -DCMAKE_INSTALL_PREFIX=/tmp/prefix \
        -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang \
        -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache
    - name: Make
      run: 'cd /build && make -j2 -k'
    - name: Make Test
      env:
        DISTRO: ${{matrix.distro}}
      run: |
        printf '### Test Summary\n' >> "${GITHUB_STEP_SUMMARY}"
        printf '::group::ctest\n'
        cd /build && \
        ctest --output-on-failure && \
        printf '::endgroup::' && \
        printf 'Success. :rocket:\n' >> "${GITHUB_STEP_SUMMARY}" && \
        exit 0
        printf '::endgroup::'
        printf '::group::List failed tests\n'
        ctest --rerun-failed --show-only -O /tmp/failed.log
        nfailed=$(sed -n 's/^Total Tests: \([[:digit:]]*\)/\1/p' /tmp/failed.log)
        printf '::error title=%s Test Failures::%d Failed tests\n' "${DISTRO}" "${nfailed}"
        printf '%d Failed tests:\n\n' nfailed >> "${GITHUB_STEP_SUMMARY}"
        sed -n 's/^[[:space:]]*Test  #\([[:digit:]]*\): \(.*\)$/- \1: `\2`/p' /tmp/failed.log >> "${GITHUB_STEP_SUMMARY}"
        printf '::endgroup::'
        exit -1
    - name: Generate Installation Artifact
      run: |
        cd /build
        make install
        cd /tmp/prefix
        # TODO: replace xz -2 with zstd -12, which should be orders of magnitude faster
        # However, zstd is currently not available in the VM
        export ARCHIVE="${GITHUB_WORKSPACE}/install.tar.xz"
        tar cf - * | xz -2 -T 2 > "${ARCHIVE}"
        printf 'Installation Artifact C++-Only:\n"%s" Size %sB\n' "${ARCHIVE}" $(du -BM "${ARCHIVE}")
    - name: Upload Installation Artifact
      uses: actions/upload-artifact@v3
      with:
        name: installation-nopython
        path: |
          ${{github.workspace}}/install.tar.xz
          /build/install_manifest.txt
          /build/compile_commands.json
