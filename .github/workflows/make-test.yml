name: 'Make Test'
on:
  push:
    branches:
      - main
      - base-installer-support
  pull_request:
    branches:
      - main
      - base-installer-support
jobs:
  # Check hashes first
  check-hashes:
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    name: Check hashes
    container:
      image: 'gnuradio/ci:fedora-42-3.10'
    steps:
    - name: Checkout project
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - name: Add git repo to safe repos
      run: git config --global --add safe.directory ${GITHUB_WORKSPACE}
    - name: Run hash fixer on all binding files
      run: gr-utils/bindtool/scripts/binding-hash-hotfixer.zsh gr-*/python/*/bindings/*.cc gnuradio-runtime/python/gnuradio/gr/bindings/*.cc
    - name: get changed files
      run: >
          git --no-pager diff -z --name-only --
          > /tmp/hashdiff
          ; [[ ! -s /tmp/hashdiff ]] && exit 0
          ; sed -z 's;.*;::error file=&::Hash mismatch in &\n;' /tmp/hashdiff
          | tr -d '\0'
          ; exit -1

  # We continue checking C++ formatting. No one gets free CPU cycles if they
  # can't use clang-format.
  check-formatting:
    name: Check C++ Formatting
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v2
    - uses: DoozyX/clang-format-lint-action@v0.14
      with:
        source: '.'
        extensions: 'h,hpp,cpp,cc,cc.in'
        clangFormatVersion: 14
  check-python-formatting:
    name: Check Python Formatting
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v2
    - uses: quentinguidee/pep8-action@v1
      with:
        # -----------------------------------
        # UPDATE tox.ini when making changes!
        arguments: '--max-line-length=120 --ignore E265,E266,E275,E402,E501,E704,E712,E713,E714,E711,E721,E722,E741,W504,W605 --exclude *.yml.py'
        # -----------------------------------
  linux-docker:
  # All of these shall depend on the formatting check (needs: check-formatting)
    needs: [check-hashes, check-formatting, check-python-formatting]
    runs-on: ubuntu-24.04
    # The GH default is 360 minutes (it's also the max as of Feb-2021). However
    # we should fail sooner. The only reason to exceed this time is if a test
    # hangs.
    timeout-minutes: 120
    strategy:
      # Enabling fail-fast would kill all Dockers if one of them fails. We want
      # maximum output.
      fail-fast: false
      matrix:
        # For every distro we want to test here, add one key 'distro' with a
        # descriptive name, and one key 'containerid' with the name of the
        # container (i.e., what you want to docker-pull)
        include:
          - distro: 'Doxygen (Fedora 41)'
            containerid: 'gnuradio/ci:fedora-41-3.10'
            enable_doxygen: On
            enable_default: Off
            enable_python: Off
          - distro: 'No-Python Ubuntu 24.04'
            containerid: 'gnuradio/ci:ubuntu-24.04-3.10'
            enable_python: Off
          - distro: 'Ubuntu 22.04'
            containerid: 'gnuradio/ci:ubuntu-22.04-3.9'
            ctest_args: '-E "qa_polar_..coder_(sc_)?systematic"'
          - distro: 'Ubuntu 24.04'
            containerid: 'gnuradio/ci:ubuntu-24.04-3.10'
          - distro: 'Fedora 41 (with 0xFE memory initialization, GLIBCXX_ASSERTIONS)'
            containerid: 'gnuradio/ci:fedora-41-3.10'
            cxxflags: -ftrivial-auto-var-init=pattern -Wp,-D_GLIBCXX_ASSERTIONS
            ldpath: /usr/local/lib64
          - distro: 'Fedora 42 (clang, ninja)'
            containerid: 'gnuradio/ci:fedora-42-3.10'
            cxxflags: -Wno-unused-command-line-argument
            cmakeflags: -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -GNinja
            build_options: --
            ldpath: /usr/local/lib64
          - distro: 'Debian 12'
            containerid: 'gnuradio/ci:debian-12-3.10'
          - distro: 'Debian 12 (32-bit)'
            containerid: 'gnuradio/ci:debian-i386-12-3.10'
            containeroptions: '--platform linux/i386'
            ctest_args: '-E "qa_polar_..coder_(sc_)?systematic"'
            ## Skip upload, cause 32 bit node doesn't work
            skip_upload: True
    name: ${{ matrix.distro }}
    container:
      image: ${{ matrix.containerid }}
      volumes:
        - build_data:/build
      options: --cpus 4 ${{ matrix.containeroptions }}
    steps:
    - uses: actions/checkout@v1
      name: Checkout Project
    - name: Prepare sccache usage (if available)
      if: ${{ vars.SCCACHE_S3_BUCKET && vars.SCCACHE_S3_ENDPOINT }}
      id: enable_sccache
      env:
        SCCACHE_S3_ENDPOINT: ${{ vars.SCCACHE_S3_ENDPOINT }}
        SCCACHE_S3_BUCKET: ${{ vars.SCCACHE_S3_BUCKET }}
        SCCACHE_S3_REGION: ${{ vars.SCCACHE_S3_REGION }}
      run: tools/setup_cmake_cache_flags.bash "${{ matrix.distro }}"
    - name: CMake
      env:
        CXXFLAGS: ${{ matrix.ignore_errors || '-Werror' }} ${{ matrix.cxxflags }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.SCCACHE_S3_KEY }}
        AWS_ACCESS_KEY_ID: ${{ vars.SCCACHE_S3_KEY_ID }}
      run: >
        cd /build
        && cmake
        -DENABLE_DEFAULT=${{ matrix.enable_default || 'On' }}
        -DENABLE_DOXYGEN=${{ matrix.enable_doxygen || 'Off' }}
        -DENABLE_PYTHON=${{  matrix.enable_python  || 'On' }}
        ${{ steps.enable_sccache.outputs.CXX_LAUNCHER }}
        ${{ steps.enable_sccache.outputs.C_LAUNCHER }}
        ${{ matrix.cmakeflags }}
        -DCMAKE_BUILD_TYPE=RelWithDebInfo
        ${GITHUB_WORKSPACE}
    - name: Dump compile commands
      if: ${{ ! matrix.skip_upload }}
      uses: actions/upload-artifact@v4
      with:
        name: '${{ matrix.distro }}.compile_commands.json'
        path: /build/compile_commands.json
        if-no-files-found: ignore
    - name: Make
      env:
        AWS_SECRET_ACCESS_KEY: ${{ secrets.SCCACHE_S3_KEY }}
        AWS_ACCESS_KEY_ID: ${{ vars.SCCACHE_S3_KEY_ID }}
      run: cmake --build /build ${{ matrix.build_options || '--parallel $(nproc)' }}
    - name: Make Test
      env:
        QT_QPA_PLATFORM: offscreen
      run: 'cd /build && ctest --output-on-failure ${{ matrix.ctest_args }} -j2'
    - name: Make Install
      run: cmake --install /build
    - name: Update dynamic linker directories
      if:  ${{ matrix.ldpath }}
      run: echo "${{ matrix.ldpath }}" >> /etc/ld.so.conf
    - name: ldconfig
      run: ldconfig
    - name: Test Python3
      if: ${{ matrix.enable_python != 'Off' }}
      run: python3 -c "import gnuradio.blocks; print(gnuradio.blocks.complex_to_float())"
    - name: Install into bundling directory
      if: ${{ ! matrix.skip_upload }}
      run: cmake --install /build --prefix /target
    - name: Bundle installed files
      if: ${{ ! matrix.skip_upload }}
      run: tools/collect_installation.bash "${{ matrix.distro }}" "/target" "/installation-archive.squash"
    - name: Upload installation archive
      if: ${{ ! matrix.skip_upload }}
      uses: actions/upload-artifact@v4
      with:
        name: '${{ matrix.distro }} installation archive'
        # already much better compressed
        compression-level: 0
        path: /installation-archive.squash
        if-no-files-found: warn
        # these things are kinda large, keep them around for 7 days: we can recreate them if we want
        retention-days: 7
    - name: Check for installation duplicates
      if: ${{ ! matrix.skip_upload }}
      run: tools/check_installation_duplicates.bash /build/install_manifest.txt
    - name: Sccache statistics
      if: ${{ steps.enable_sccache.outputs.CXX_LAUNCHER }}
      run: sccache -s
  mingw64:
    timeout-minutes: 80
  # All of these shall depend on the formatting check (needs: check-formatting)
    needs: [check-hashes, check-formatting, check-python-formatting]
    runs-on: windows-latest
    name: MinGW-w64
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          git
          make
        pacboy: >-
          toolchain:p
          cmake:p
          ninja:p
          boost:p
          cppzmq:p
          fftw:p
          gsl:p
          gsm:p
          gtk3:p
          jack2:p
          libsndfile:p
          libunwind:p
          pango:p
          portaudio:p
          pybind11:p
          python:p
          python-click:p
          python-gobject:p
          python-jsonschema:p
          python-mako:p
          python-numpy:p
          python-pip:p
          python-pyqt5:p
          python-pyzmq:p
          python-yaml:p
          qt5-base:p
          qwt-qt5:p
          SDL:p
          soapysdr:p
          spdlog:p
          thrift:p
          volk:p
          sccache:p
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Prepare sccache usage (if available)
      if: ${{ vars.SCCACHE_S3_BUCKET && vars.SCCACHE_S3_ENDPOINT }}
      id: enable_sccache
      env:
        SCCACHE_S3_ENDPOINT: ${{ vars.SCCACHE_S3_ENDPOINT }}
        SCCACHE_S3_BUCKET: ${{ vars.SCCACHE_S3_BUCKET }}
        SCCACHE_S3_REGION: ${{ vars.SCCACHE_S3_REGION }}
      run: tools/setup_cmake_cache_flags.bash "${{ matrix.distro }}"
    - name: CMake
      env:
        AWS_SECRET_ACCESS_KEY: ${{ secrets.SCCACHE_S3_KEY }}
        AWS_ACCESS_KEY_ID: ${{ vars.SCCACHE_S3_KEY_ID }}
      run: |
        cmake -S . -B build \
          -DCMAKE_INSTALL_PREFIX=${RUNNER_TEMP}/msys64/mingw64 \
          -DENABLE_DOXYGEN=OFF \
          ${{ steps.enable_sccache.outputs.CXX_LAUNCHER }} \
          ${{ steps.enable_sccache.outputs.C_LAUNCHER }}
    - name: Make
      env:
        AWS_SECRET_ACCESS_KEY: ${{ secrets.SCCACHE_S3_KEY }}
        AWS_ACCESS_KEY_ID: ${{ vars.SCCACHE_S3_KEY_ID }}
        SCCACHE_CONF: ${{ steps.enable_sccache.outputs.SCCACHE_CONF }}
      run: cmake --build build
    - name: Make Install
      run: cmake --install build
    - name: Make Test
      working-directory: ./build
      run: ctest --output-on-failure
    - name: Sccache statistics
      env: 
        SCCACHE_CONF: ${{ steps.enable_sccache.outputs.SCCACHE_CONF }}
      if: ${{ steps.enable_sccache.outputs.CXX_LAUNCHER }}
      run: sccache -s
