name: 'Windows Installer Builder'
on:
  workflow_dispatch:


jobs:
  ## duplicate from make-test.yml
  # Check hashes first
  check-hashes:
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    name: Check hashes
    container:
      image: 'gnuradio/ci:fedora-42-3.10'
    steps:
    - name: Checkout project
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - name: Add git repo to safe repos
      run: git config --global --add safe.directory ${GITHUB_WORKSPACE}
    - name: Run hash fixer on all binding files
      run: gr-utils/bindtool/scripts/binding-hash-hotfixer.zsh gr-*/python/*/bindings/*.cc gnuradio-runtime/python/gnuradio/gr/bindings/*.cc
    - name: get changed files
      run: >
          git --no-pager diff -z --name-only --
          > /tmp/hashdiff
          ; [[ ! -s /tmp/hashdiff ]] && exit 0
          ; sed -z 's;.*;::error file=&::Hash mismatch in &\n;' /tmp/hashdiff
          | tr -d '\0'
          ; exit -1

  # We continue checking C++ formatting. No one gets free CPU cycles if they
  # can't use clang-format.
  check-formatting:
    name: Check C++ Formatting
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v2
    - uses: DoozyX/clang-format-lint-action@v0.14
      with:
        source: '.'
        extensions: 'h,hpp,cpp,cc,cc.in'
        clangFormatVersion: 14
  check-python-formatting:
    name: Check Python Formatting
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v2
    - uses: quentinguidee/pep8-action@v1
      with:
        # -----------------------------------
        # UPDATE tox.ini when making changes!
        arguments: '--max-line-length=120 --ignore E265,E266,E275,E402,E501,E704,E712,E713,E714,E711,E721,E722,E741,W504,W605 --exclude *.yml.py'
        # -----------------------------------
  ## end duplication
  build-windows:
    # All of these shall depend on the formatting check (needs: check-formatting)
    needs: [check-hashes, check-formatting, check-python-formatting]
    runs-on: windows-latest
    name: Windows Installer (cmake with msbuild)
    defaults:
      run:
        shell: cmd
    steps:
    - name: Check environment
      env:
        TEST_VAR: '%PROGRAMFILES%\GNU Radio'
      run: |
        set TEST_VAR2=%PROGRAMFILES\GNU Radio
        call set TEST_VAR1=%%TEST_VAR%%
        set
        echo TEST_VAR1=%TEST_VAR1%>> %GITHUB_ENV%
        dir %SystemDrive%
# VS 2022 Enterprise with Microsoft.VisualStudio.Component.VC.Tools.x86.x64 is already included
# https://github.com/actions/runner-images/blob/main/images/windows/Windows2022-Readme.md
#    - name: Download and install msbuild
#      run: |
#        powershell -NoProfile -ExecutionPolicy Bypass -Command ^
#          Invoke-WebRequest "https://aka.ms/vs/17/release/vs_buildtools.exe" ^
#          -OutFile "%TEMP%\vs_buildtools.exe" -UseBasicParsing
#        "%TEMP%\vs_buildtools.exe"  --quiet --wait --norestart --noUpdateInstaller ^
#          --add Microsoft.VisualStudio.Workload.VCTools ^
#          --add Microsoft.VisualStudio.ComponentGroup.VC.Tools.142.x86.x64 ^
#          --includeRecommended
#        REM Accept exit code 3010 as success
#        IF %ERRORLEVEL% EQU 3010 EXIT 0
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: gnuradio
    - name: Install chocolatey
      run: |
        @rem chocolatey should be installed
        @rem setx chocolateyVersion 1.4.0 /m
        @rem @"%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" ^
        @rem -NoProfile -InputFormat None -ExecutionPolicy Bypass ^
        @rem -Command "[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))"
        @rem SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"
        choco list
#    - name: Download and install msbuild via chocolatey
#      run: |
#        choco install -y visualstudio2022buildtools ^
#          --quiet
#        type %ChocolateyInstall%\logs\chocolatey.log
#        choco install -y visualstudio2022-workload-vctools ^
#          --package-parameters "--includeRecommended" ^
#          --quiet
#        type %ChocolateyInstall%\logs\chocolatey.log
    - name: Install with chocolatey
      run: |
        choco list
        choco install -y doxygen.install --version=1.9.1
        choco install -y NSIS --version=3.10
#    - name: Add msbuild to PATH environment variable
#      if: always()
#      uses: microsoft/setup-msbuild@v2
#      with:
#        msbuild-architecture: x64
#        #vs-version: '[16.0, 17.0)'
#        vs-version: '[17.0, 18.0)'
    - name: Export vcvars64 path for 'x64 Native Tools Command Prompt'
      if: always()
      run: |
        set
        where msbuild
        #set msbuild_vcvars64=C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat
        set msbuild_vcvars64=C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat
        if NOT EXIST "%msbuild_vcvars64%" (^
           echo ERROR: Could not locate 'vcvars64' batch file at "%msbuild_vcvars64%". This script is intended to be run from a build machine & exit /B 1)
        echo msbuild_vcvars64=%msbuild_vcvars64%>> %GITHUB_ENV%
        call "%msbuild_vcvars64%"
        set VSINSTALLDIR
        call set _VSINSTALLDIR=%%VSINSTALLDIR:~0,-1%%
        set _VSINSTALLDIR
        call set __VSINSTALLDIR=%%VSINSTALLDIR:~-1%%
        set __VSINSTALLDIR
        @rem This work - if "%__VSINSTALLDIR%" == "\" (set VSINSTALLDIR="%_VSINSTALLDIR%")
        if "%__VSINSTALLDIR%" == "\" set VSINSTALLDIR=%_VSINSTALLDIR%
        set VSINSTALLDIR
        echo VSINSTALLDIR1=%VSINSTALLDIR%>> %GITHUB_ENV%
        echo for /f "usebackq tokens=*" %%i in (`"C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -version "[17.0, 18.0)" -requires Microsoft.VisualStudio.Workload.VCTools -property installationPath -products *`)
        call "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -requires Microsoft.VisualStudio.Workload.VCTools -property installationPath -products *
        for /f "usebackq tokens=*" %%i in (`call "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -requires Microsoft.VisualStudio.Workload.VCTools -property installationPath -products *`) do (set test=%%i)
        echo '%test%'
        dir c:
        dir d:
        "%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" ^
            -NoProfile -InputFormat None -ExecutionPolicy Bypass ^
            -Command "Get-CimInstance Win32_PageFileUsage | fl *"
        "%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" ^
            -NoProfile -InputFormat None -ExecutionPolicy Bypass ^
            -Command "Get-ComputerInfo | Select-Object TotalPhysicalMemory, AvailablePhysicalMemory"
        wmic OS
#    - name: configure Pagefile
#      uses: al-cheb/configure-pagefile-action@v1.2
#      with:
#        minimum-size: 16GB
#        maximum-size: 64GB
#        disk-root: "D:"
#    - name: check Pagefile
#      run: |
#        dir d:
#        "%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" ^
#            -NoProfile -InputFormat None -ExecutionPolicy Bypass ^
#            -Command "Get-CimInstance Win32_PageFileUsage | fl *"
#        "%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" ^
#            -NoProfile -InputFormat None -ExecutionPolicy Bypass ^
#            -Command "Get-ComputerInfo | Select-Object TotalPhysicalMemory, AvailablePhysicalMemory"
    - name: Setup Python 3.12
      if: always()
      uses: actions/setup-python@v5
      id: cp312
      with:
        python-version: '3.12'
    - name: Create Python Virtual Environment
      env:
        PY_VENV_PATH: ${{ runner.workspace }}\py_venv
      run: | 
        echo '${{ steps.cp312.outputs.python-version }}'
        ${{ steps.cp312.outputs.python-path }} -m pip install virtualenv
        ${{ steps.cp312.outputs.python-path }} -m venv %PY_VENV_PATH%
        call %PY_VENV_PATH%\Scripts\activate
        set pythonLocation=%PY_VENV_PATH%&& set Python_ROOT_DIR=%PY_VENV_PATH%&& set ^
            Python2_ROOT_DIR=%PY_VENV_PATH%&& set Python3_ROOT_DIR=%PY_VENV_PATH%
        python -c "import sys;print(sys.path)"
        echo PY_VENV_PATH=%PY_VENV_PATH%>> %GITHUB_ENV%
        @rem echo PATH=%PATH%>> %GITHUB_ENV%
        set RUNNER_WORKSPACE
        set GITHUB_WORKSPACE
        pip install -r %GITHUB_WORKSPACE%\gnuradio\release\requirements.txt
    # Need to check if GHCUP_MSYS2 can be used
    - uses: msys2/setup-msys2@v2
      id: msys2
      with:
        update: true
        MSYSTEM: ucrt64
    - name: Export environment variable MSYS2_LOCATION
      env:
        MSYS2_LOCATION: ${{ steps.msys2.outputs.msys2-location }}
      run: |
        set MSYS2_LOCATION
        set MSYSTEM
        echo MSYSTEM=%MSYSTEM%>> %GITHUB_ENV%
        echo MSYS2_LOCATION=%MSYS2_LOCATION%>> %GITHUB_ENV%
    - name: Download GTK3 from Github release asset
      env:
        url: 'https://github.com/wingtk/gvsbuild/releases/download/2024.10.0/GTK3_Gvsbuild_2024.10.0_x64.zip'
        target_path: ${{ runner.workspace }}\gtk3-release
        temp_file_name: gtk3_download.zip
      run: |
        set
        @echo Download GTK binaries from
        @echo     '%url%'
        powershell -NoProfile -ExecutionPolicy Bypass ^
            -Command Invoke-WebRequest "%url%" ^
            -OutFile "%TEMP%\%temp_file_name%" -UseBasicParsing
        @echo Extract downloaded archive '%temp_file_name%' to:
        @echo    '%target_path%'
        mkdir "%target_path%"
        cd "%target_path%"
        tar -xf "%TEMP%\%temp_file_name%"
        dir
    - name: Step6 -- Download GTK3 binaries and install GTK python support
      run: |
        @echo Step6: Install GTK ...
        set GTK_ROOT=%RUNNER_WORKSPACE%\gtk3-release
        set INCLUDE=%GTK_ROOT%\include;%GTK_ROOT%\include\cairo;%GTK_ROOT%\include\glib-2.0;%GTK_ROOT%\include\gobject-introspection-1.0;%GTK_ROOT%\lib\glib-2.0\include;%INCLUDE%
        echo INCLUDE=%INCLUDE%>> %GITHUB_ENV%
        set LIB=%GTK_ROOT%\lib;%LIB%
        echo LIB=%LIB%>> %GITHUB_ENV%
        set GTK_BIN_DIR=%GTK_ROOT%\bin
        echo GTK_BIN_DIR=%GTK_BIN_DIR%>> %GITHUB_ENV%
        call set fps_GTK_BIN_DIR=%%GTK_BIN_DIR:\=/%%
        echo fps_GTK_BIN_DIR=%fps_GTK_BIN_DIR%>> %GITHUB_ENV%
        set PATH=%GTK_BIN_DIR%;%PATH%
        dir %GTK_ROOT%\python
        call %PY_VENV_PATH%\Scripts\activate
        set pythonLocation=%PY_VENV_PATH%&& set Python_ROOT_DIR=%PY_VENV_PATH%&& set ^
            Python2_ROOT_DIR=%PY_VENV_PATH%&& set Python3_ROOT_DIR=%PY_VENV_PATH%
        for %%i in (%GTK_ROOT%\python\PyGObject*.whl) do (pip install --force-reinstall %%i)
        for %%i in (%GTK_ROOT%\python\pycairo*.whl) do (pip install --force-reinstall %%i)
        @echo Verify pygi installation
        python -c "import os;os.add_dll_directory('%fps_GTK_BIN_DIR%');import gi;gi.require_version('Gtk', '3.0');gi.require_foreign('cairo', 'Context');gi.require_version('PangoCairo', '1.0')"
#    - name: Clone GVSBuild (to build GTK)
#      uses: actions/checkout@v4
#      with:
#        repository: 'wingtk/gvsbuild'
#        ref: '09028ca09c3f7eef4d7fe935f79cacd2fbb4410f'
#        path: gvsbuild
#        fetch-depth: 2
#    - run: |
#        echo %CD%
#        @rem CD is D:\a\gnuradio\gnuradio
#        set MSYSTEM
#        set MSYS2_LOCATION
#        set Python3_ROOT_DIR
#        set 
#        dir %RUNNER_WORKSPACE%
#        dir
#        cd gvsbuild
#        echo %CD% -- Calling git
#        git checkout HEAD
#        git status
#        echo %CD% -- Done Calling git
#    - name: Debug GTK build error
#      run: |
#        set VSCMD_DEBUG=3
#        @echo DEBUG: Calling cmd /c vcvars w/ redirection
#        cmd.exe /c ""%msbuild_vcvars64%">NUL && set"
#        echo Errorlevel %errorlevel%
#        @echo DEBUG: Reading log file dd_vsdevcmd*.log
#        type C:\Users\RUNNER~1\AppData\Local\Temp\dd_vsdevcmd17_preinit_env.log
#        type C:\Users\RUNNER~1\AppData\Local\Temp\dd_vsdevcmd17_env.log
#        @echo DEBUG: Calling cmd /c vcvars w/o redirection
#        cmd.exe /c ""%msbuild_vcvars64%""
#        echo Errorlevel %errorlevel%
#        @echo DEBUG: Reading log file dd_vsdevcmd*.log
#        type C:\Users\RUNNER~1\AppData\Local\Temp\dd_vsdevcmd17_preinit_env.log
#        type C:\Users\RUNNER~1\AppData\Local\Temp\dd_vsdevcmd17_env.log
#        @echo DEBUG: Calling vcvars directly
#        call "%msbuild_vcvars64%"
#        echo Errorlevel %errorlevel%
    #
    #- env:
    #    MSYS2_LOCATION: ${{ steps.msys2.outputs.msys2-location }}
    #    MSYSTEM: ucrt64
    #  run: |
    #    echo Exporting environment variable MSYS2_LOCATION with value '%MSYS2_LOCATION%'
    #    echo MSYS2_LOCATION=%MSYS2_LOCATION%>> %GITHUB_ENV%
    #- name: Clone Qt5 for Windows from git://code.qt.io/qt
    #  env:
    #    QT_ROOT_DIR
    #  run: |
    #    @echo Using instructions at https://wiki.qt.io/Building_Qt_5_from_Git#Getting_the_source_code
#    - name: Install Qt using jurplel/install-qt-action@v4
#      uses: jurplel/install-qt-action@v4
#        # uses aqt installed into default python to download prebuild qt
#        # extracts to ${{ runner.workspace }}
#        # exports the variables Qt5_DIR, QT_ROOT_DIR, QT_PLUGIN_PATH, QML2_IMPORT_PATH
#      with:
#        aqtversion: '==3.1.*'
#        version: '5.15.2'
#        host: 'windows'
#        target: 'desktop'
#        arch: 'win64_msvc2019_64'
    - name: Download PyQT5 source from pip
      env:
        url: 'https://files.pythonhosted.org/packages/0e/07/c9ed0bd428df6f87183fca565a79fee19fa7c88c7f00a7f011ab4379e77a/PyQt5-5.15.11.tar.gz'
        target_path: ${{ runner.workspace }}\PyQt5-5.15.11
        temp_file_name: PyQT5_download.tar.gz
      run: |
        powershell -NoProfile -ExecutionPolicy Bypass ^
            -Command Invoke-WebRequest "%url%" ^
            -OutFile "%TEMP%\%temp_file_name%" -UseBasicParsing
        @echo Extract downloaded archive '%temp_file_name%' to:
        @echo    '%target_path%'
        cd "%target_path%"\..
        tar -xf "%TEMP%\%temp_file_name%"
        dir
        cd "%target_path%"
        dir
    - name: Install C++ Pkg Mgr - Conan2 via pip
      run: |
        python -c "import sys;print(sys.path)"
        set PY_VENV_PATH
        call %PY_VENV_PATH%\Scripts\activate
        set pythonLocation=%PY_VENV_PATH%&& set Python_ROOT_DIR=%PY_VENV_PATH%&& set ^
            Python2_ROOT_DIR=%PY_VENV_PATH%&& set Python3_ROOT_DIR=%PY_VENV_PATH%
        python -c "import sys;print(sys.path)"
        python -m pip install conan
        conan version
        set
    - name: Run Conan2 and create cmake build generators
      env:
        DEPS_CMAKE_GENERATORS: ${{ github.workspace }}\deps
      run: |
        echo %CD%
        @echo Conan2 was installed via Python venv, therefore need to activate it before use
        call %PY_VENV_PATH%\Scripts\activate
        set pythonLocation=%PY_VENV_PATH%&& set Python_ROOT_DIR=%PY_VENV_PATH%&& set ^
            Python2_ROOT_DIR=%PY_VENV_PATH%&& set Python3_ROOT_DIR=%PY_VENV_PATH%
        conan profile detect --force
        conan install gnuradio/release --output-folder=%DEPS_CMAKE_GENERATORS% --build=missing
        echo DEPS_CMAKE_GENERATORS=%DEPS_CMAKE_GENERATORS%>> %GITHUB_ENV%
    - name: step7 -- Build and install PyQT5
      run: |
        call "%msbuild_vcvars64%"
        @echo Step7: QT bindings ...
        set QT_ROOT_DIR
        set Qt5_DIR
        @rem SET PATH=%QT_ROOT_DIR%\bin;%PATH%
        call %PY_VENV_PATH%\Scripts\activate
        set pythonLocation=%PY_VENV_PATH%&& set Python_ROOT_DIR=%PY_VENV_PATH%&& set ^
            Python2_ROOT_DIR=%PY_VENV_PATH%&& set Python3_ROOT_DIR=%PY_VENV_PATH%
        python -m pip install PyQt-builder
        @echo Explicitly uninstall PyQt5 installed via requirements
        python -m pip uninstall -y PyQt5 PyQt5-Qt5
        @echo Activate conan runtime environment by calling DEPS_CMAKE_GENERATORS\build\generators\conanrun.bat 
        dir %DEPS_CMAKE_GENERATORS%\build\generators
        call %DEPS_CMAKE_GENERATORS%\build\generators\conanrun.bat
        cd %RUNNER_WORKSPACE%\PyQt5-5.15.11
        dir
        sip-install -h
        @echo Start codegen but disable QtNfc to avoid LNK1169 when linking QtNfc.dll
        @echo Alternativly may specifc LINK=/FORCE:MULTIPLE
        sip-build --no-make --confirm-license --disable QtNfc
        cd build && nmake
        nmake install
        python -m pip install PyQt5-sip
    - name: Clone Volk
      uses: actions/checkout@v4
      # Building Volk from hand, because of unreliable python venv detection during "Build C++ dependencies"
      with:
        repository: 'gnuradio/volk'
        ref: '308948abf8384bb4bf6467e14b585df708789782'
        path: volk
        fetch-depth: 2
        submodules: 'true'
    - name: Build Volk
      env:
        VOLK_INSTALL_DIR: ${{ runner.workspace }}\volk-installed
      run: |
        cd volk
        @echo Just in case explicitly initialize submodules
        git submodule update --init
        call "%msbuild_vcvars64%"
        call %PY_VENV_PATH%\Scripts\activate
        set pythonLocation=%PY_VENV_PATH%&& set Python_ROOT_DIR=%PY_VENV_PATH%&& set ^
            Python2_ROOT_DIR=%PY_VENV_PATH%&& set Python3_ROOT_DIR=%PY_VENV_PATH%
        mkdir build
        cd build
        set CMAKE_ARGS= -DCMAKE_BUILD_TYPE=Release -LA
        set CMAKE_ARGS=%CMAKE_ARGS% -DCMAKE_PREFIX_PATH=%DEPS_CMAKE_GENERATORS%/build/generators
        set CMAKE_ARGS=%CMAKE_ARGS% -DCMAKE_INSTALL_PREFIX=%VOLK_INSTALL_DIR%
        @rem volk is using FindPythonInterp, which does not reliable detect venv
        set CMAKE_ARGS=%CMAKE_ARGS% -DPYTHON_EXECUTABLE=%PY_VENV_PATH%\Scripts\python.exe
        @echo Calling cmake from path '%CD%' with args '%CMAKE_ARGS%'
        cmake ..  -GNinja %CMAKE_ARGS%
        ninja
        @rem ninja test
        ninja install
        echo VOLK_INSTALL_DIR=%VOLK_INSTALL_DIR%>> %GITHUB_ENV%
    - name: Build C++ dependencies
      run: |
        echo %CD%
        call "%msbuild_vcvars64%"
        call %PY_VENV_PATH%\Scripts\activate
        set pythonLocation=%PY_VENV_PATH%&& set Python_ROOT_DIR=%PY_VENV_PATH%&& set ^
            Python2_ROOT_DIR=%PY_VENV_PATH%&& set Python3_ROOT_DIR=%PY_VENV_PATH%
        set
        @echo Install additional python module for volk
        python -m pip install mako
        @echo Install additional python module for uhd
        python -m pip install mako numpy ruamel.yaml setuptools poetry
        set _working=%CD%
        mkdir cmake-deps
        robocopy /E /DCOPY:T /NJH /NFL /NDL /MT /W:5 /R:4 "gnuradio\release\deps" cmake-deps
        mkdir cmake-deps\tpls
        robocopy /NJH /NFL /NDL /MT /W:5 /R:4 "cmake-deps\deps" "cmake-deps\tpls" FetchAndBuild*.cmake
        dir
        cd cmake-deps
        mkdir build
        cd build
        cmake .. -GNinja  ^
            -DCMAKE_INSTALL_PREFIX=%DEPS_CMAKE_GENERATORS% -DCMAKE_PREFIX_PATH=%DEPS_CMAKE_GENERATORS%/build/generators ^
            -DCMAKE_FIND_PACKAGE_PREFER_CONFIG=ON "-DCMAKE_CXX_FLAGS=-DBOOST_ALL_NO_LIB /EHsc" -LA ^
            -DBUILD_VOLK=NO -DBUILD_UHD=NO
        ninja
    - name: Check environment
      run: |
        echo working path=_%CD%_
        @rem CD was D:\a\gnuradio\gnuradio
        git status
        set MSYS2_LOCATION
        set MSYSTEM
        set PY_VENV_PATH
        dir %CD%
        dir %RUNNER_WORKSPACE%
        set
    - name: Building GRC binaries
      run: |
        call "%msbuild_vcvars64%"
        call %PY_VENV_PATH%\Scripts\activate
        set pythonLocation=%PY_VENV_PATH%&& set Python_ROOT_DIR=%PY_VENV_PATH%&& set ^
            Python2_ROOT_DIR=%PY_VENV_PATH%&& set Python3_ROOT_DIR=%PY_VENV_PATH%
        @rem SET PATH=%QT_ROOT_DIR%\bin;%GTK_BIN_DIR%;%PATH%
        SET PATH=%GTK_BIN_DIR%;%PATH%
        call %DEPS_CMAKE_GENERATORS%\build\generators\conanrun.bat
        set
        @echo Step8: Building GRC binaries ...
        set GR_INSTALL_DIR=%PROGRAMFILES%\GNU Radio
        echo GR_INSTALL_DIR=%GR_INSTALL_DIR%>> %GITHUB_ENV%
        dir
        set _working=%CD%
        cd gnuradio
        mkdir build
        cd build
        cmake .. -GNinja -DGR_BUILD_INSTALLER=ON ^
            -DCMAKE_PREFIX_PATH=%_working%/deps/build/generators;%_working%/deps ^
            -DCMAKE_FIND_PACKAGE_PREFER_CONFIG=ON "-DCMAKE_CXX_FLAGS=-DBOOST_ALL_NO_LIB /EHsc" -LA ^
            -DVolk_DIR=%VOLK_INSTALL_DIR%/lib/cmake/volk -DGTK_BIN_DIR=%fps_GTK_BIN_DIR% ^
            "-DCMAKE_INSTALL_PREFIX=%GR_INSTALL_DIR%" ^
            -DPYTHON_EXECUTABLE=%PY_VENV_PATH%\Scripts\python.exe
        Ninja install
        @echo Build installer
        cpack
    - name: Bundle installed files
      if: success() || failure()
      run: |
        mkdir installation-archive.squash
        cd installation-archive.squash
        mkdir %RUNNER_WORKSPACE%\cmake-backup
        robocopy /NJH /NFL /NDL /MT /W:5 /R:4 "%GITHUB_WORKSPACE%\gnuradio\build" "%RUNNER_WORKSPACE%\cmake-backup"
        tar -czf cmake-backup.gzip -C "%RUNNER_WORKSPACE%\cmake-backup" .
        robocopy /NJH /NDL /MT /W:5 /R:4 "%GITHUB_WORKSPACE%\gnuradio\build\_CPack_Packages\win64\NSIS" .
        tar -czf gnuradio.gzip -C "%PROGRAMFILES%\GNU Radio" .
        set GR_INSTALL_DIR
        dir
    - name: Upload build artifact archive
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: build artifact archive'
        # already much better compressed
        compression-level: 0
        path:  ${{ github.workspace }}/installation-archive.squash
        if-no-files-found: warn
        # these things are kinda large, keep them around for 7 days: we can recreate them if we want
        retention-days: 7
    - name: Upload installation archive
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: installation archive'
        # already much better compressed
        compression-level: 0
        path: ${{ github.workspace }}/gnuradio/build/*-win64.exe
        if-no-files-found: error
        # these things are kinda large, keep them around for 7 days: we can recreate them if we want
        retention-days: 7
    # - name: Build GTK binaries with gvsbuild
      # env:
        # gtk_version: gtk3
        # gtk_build_dir: ${{ runner.workspace }}\gtk-build
        # gvsbuild_dir: ${{ github.workspace }}\gvsbuild
      # run: |
        # @echo Activate Python venv
        # call %PY_VENV_PATH%\Scripts\activate
        # set pythonLocation=%PY_VENV_PATH%&& set Python_ROOT_DIR=%PY_VENV_PATH%&& set ^
        #     Python2_ROOT_DIR=%PY_VENV_PATH%&& set Python3_ROOT_DIR=%PY_VENV_PATH%
        # python -c "import sys;print(sys.path)"
        # @echo Define MSYS2_LOCATION with linux path separators
        # call set fps_MSYS2_DIR=%%MSYS2_LOCATION:\=/%%
        # @echo   fps_MSYS2_DIR=%fps_MSYS2_DIR%
        # @echo Defining a number of environment variables pointing to future locations
        # mkdir %gtk_build_dir%
        # set GTK_ROOT=%gtk_build_dir%\gtk\x64\release
        # @rem set INCLUDE=%GTK_ROOT%\include;%GTK_ROOT%\include\cairo;%GTK_ROOT%\include\glib-2.0;%GTK_ROOT%\include\gobject-introspection-1.0;%GTK_ROOT%\lib\glib-2.0\include;%INCLUDE%
        # @rem set LIB=%GTK_ROOT%\lib;%LIB%
        # set GTK_BIN_DIR=%GTK_ROOT%\bin
        # set PATH=%GTK_BIN_DIR%;%PATH%
        # set
        # @echo Starting to build from %gvsbuild_dir%
        # @rem Defer calling vcvars64.bat as it is called by gvsbuild itself and 
        # @rem multiple calls can lead to 'The input line is too long.' errors 
        # @rem when PATH environment variable is repeatably expanded.
        # @rem call "%msbuild_vcvars64%" -clean_env
        # @rem cd %gvsbuild_dir%
        # @rem pip install .
        # #python -m pip install pipx
        # #python -m pipx ensurepath
        # #pipx list
        # #pipx install gvsbuild
        # python -m pip install gvsbuild
        # @echo TODO specify --vs-ver 17 instead of --vs-ver 16, because gvsbuild assumes --vs-ver 16 is mapped to MSVC 2019 folder
        # @echo TODO does not seem to understand the MSVC 2022 can optionally compile with older --vs_ver
        # @rem set gvsbuild_args=build %gtk_version% --configuration release --py-wheel --enable-gi --msys-dir %fps_MSYS2_DIR% --build-dir %gtk_build_dir%  --from-scratch --ninja-opts -j1 --vs-ver 17 --platform x64 --vs-install-path "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools"
        # set
        # set gvsbuild_args=build %gtk_version% --configuration release --py-wheel --enable-gi --msys-dir %fps_MSYS2_DIR% --build-dir %gtk_build_dir% --msbuild-opts /property:RunCodeAnalysis=false --ninja-opts -j1 --vs-ver 17 --platform x64
        # @echo Calling gvsbuild with arguments '%gvsbuild_args%'
        # gvsbuild %gvsbuild_args% --log-single --capture-out
        # type %gtk_build_dir%\logs\gvsbuild-log.txt
        # type %gtk_build_dir%\build\gtk\x64\release\stack.propsstack.props
        # type %gtk_build_dir%\build\gtk\x64\release\gtk3\_gvsbuild-meson\meson-logs\meson-log.txt
        # dir c:
        # dir d:
        # "%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" ^
            # -NoProfile -InputFormat None -ExecutionPolicy Bypass ^
            # -Command "Get-CimInstance Win32_PageFileUsage | fl *"
        # @echo Install pygi
        # dir %gtk_build_dir%
        # dir %GTK_ROOT%\python
        # for %%i in (%GTK_ROOT%\python\PyGObject*.whl) do (pip install --force-reinstall %%i)
        # for %%i in (%GTK_ROOT%\python\pycairo*.whl) do (pip install --force-reinstall %%i)
        # @echo Verify pygi installation
        # python -c "import os;os.add_dll_directory("%GTK_BIN_DIR%");import gi;gi.require_version('Gtk', '3.0');gi.require_foreign('cairo', 'Context');gi.require_version('PangoCairo', '1.0')"

